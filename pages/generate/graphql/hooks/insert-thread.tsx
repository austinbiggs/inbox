/* eslint-disable */
// @generated by graphql-codegen
// This file was automatically generated and should not be edited.
import * as Types from "../../../../frontend/gql/types";

import { gql } from "@apollo/client";
import * as Apollo from "@apollo/client";
const defaultOptions = {};
export type InsertThreadMutationVariables = Types.Exact<{
  senderId: Types.Scalars["Int"];
}>;

export type InsertThreadMutation = {
  __typename?: "mutation_root";
  insert_threads_one?:
    | {
        __typename?: "threads";
        id: number;
        created_by: number;
        created_at: any;
      }
    | null
    | undefined;
};

export const InsertThreadDocument = gql`
  mutation InsertThread($senderId: Int!) {
    insert_threads_one(object: { created_by: $senderId }) {
      id
      created_by
      created_at
    }
  }
`;
export type InsertThreadMutationFn = Apollo.MutationFunction<
  InsertThreadMutation,
  InsertThreadMutationVariables
>;

/**
 * __useInsertThreadMutation__
 *
 * To run a mutation, you first call `useInsertThreadMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertThreadMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertThreadMutation, { data, loading, error }] = useInsertThreadMutation({
 *   variables: {
 *      senderId: // value for 'senderId'
 *   },
 * });
 */
export function useInsertThreadMutation(
  baseOptions?: Apollo.MutationHookOptions<
    InsertThreadMutation,
    InsertThreadMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    InsertThreadMutation,
    InsertThreadMutationVariables
  >(InsertThreadDocument, options);
}
export type InsertThreadMutationHookResult = ReturnType<
  typeof useInsertThreadMutation
>;
export type InsertThreadMutationResult =
  Apollo.MutationResult<InsertThreadMutation>;
export type InsertThreadMutationOptions = Apollo.BaseMutationOptions<
  InsertThreadMutation,
  InsertThreadMutationVariables
>;
