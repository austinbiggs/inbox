/* eslint-disable */
// @generated by graphql-codegen
// This file was automatically generated and should not be edited.
import * as Types from "../../../../frontend/gql/types";

import { gql } from "@apollo/client";
import * as Apollo from "@apollo/client";
const defaultOptions = {};
export type InsertThreadUsersMutationVariables = Types.Exact<{
  threadUsers:
    | Array<Types.Threads_Users_Insert_Input>
    | Types.Threads_Users_Insert_Input;
}>;

export type InsertThreadUsersMutation = {
  __typename?: "mutation_root";
  insert_threads_users?:
    | {
        __typename: "threads_users_mutation_response";
        returning: Array<{
          __typename?: "threads_users";
          id: number;
          created_at: any;
          user_id: number;
        }>;
      }
    | null
    | undefined;
};

export const InsertThreadUsersDocument = gql`
  mutation InsertThreadUsers($threadUsers: [threads_users_insert_input!]!) {
    insert_threads_users(objects: $threadUsers) {
      __typename
      returning {
        id
        created_at
        user_id
      }
    }
  }
`;
export type InsertThreadUsersMutationFn = Apollo.MutationFunction<
  InsertThreadUsersMutation,
  InsertThreadUsersMutationVariables
>;

/**
 * __useInsertThreadUsersMutation__
 *
 * To run a mutation, you first call `useInsertThreadUsersMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useInsertThreadUsersMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [insertThreadUsersMutation, { data, loading, error }] = useInsertThreadUsersMutation({
 *   variables: {
 *      threadUsers: // value for 'threadUsers'
 *   },
 * });
 */
export function useInsertThreadUsersMutation(
  baseOptions?: Apollo.MutationHookOptions<
    InsertThreadUsersMutation,
    InsertThreadUsersMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<
    InsertThreadUsersMutation,
    InsertThreadUsersMutationVariables
  >(InsertThreadUsersDocument, options);
}
export type InsertThreadUsersMutationHookResult = ReturnType<
  typeof useInsertThreadUsersMutation
>;
export type InsertThreadUsersMutationResult =
  Apollo.MutationResult<InsertThreadUsersMutation>;
export type InsertThreadUsersMutationOptions = Apollo.BaseMutationOptions<
  InsertThreadUsersMutation,
  InsertThreadUsersMutationVariables
>;
