/* eslint-disable */
// @generated by graphql-codegen
// This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  json: any;
  numeric: any;
  timestamptz: any;
};

export type Auth0Input = {
  email: Scalars['String'];
  emailVerified: Scalars['String'];
  name: Scalars['String'];
  phone: Scalars['String'];
  phoneVerified: Scalars['String'];
  picture: Scalars['String'];
  username: Scalars['String'];
};

export type Auth0Output = {
  __typename?: 'Auth0Output';
  accessToken: Scalars['String'];
};

/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
export type Boolean_Comparison_Exp = {
  _eq?: Maybe<Scalars['Boolean']>;
  _gt?: Maybe<Scalars['Boolean']>;
  _gte?: Maybe<Scalars['Boolean']>;
  _in?: Maybe<Array<Scalars['Boolean']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Boolean']>;
  _lte?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Scalars['Boolean']>;
  _nin?: Maybe<Array<Scalars['Boolean']>>;
};

/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
export type Int_Comparison_Exp = {
  _eq?: Maybe<Scalars['Int']>;
  _gt?: Maybe<Scalars['Int']>;
  _gte?: Maybe<Scalars['Int']>;
  _in?: Maybe<Array<Scalars['Int']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Int']>;
  _lte?: Maybe<Scalars['Int']>;
  _neq?: Maybe<Scalars['Int']>;
  _nin?: Maybe<Array<Scalars['Int']>>;
};

/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
export type String_Comparison_Exp = {
  _eq?: Maybe<Scalars['String']>;
  _gt?: Maybe<Scalars['String']>;
  _gte?: Maybe<Scalars['String']>;
  /** does the column match the given case-insensitive pattern */
  _ilike?: Maybe<Scalars['String']>;
  _in?: Maybe<Array<Scalars['String']>>;
  /** does the column match the given POSIX regular expression, case insensitive */
  _iregex?: Maybe<Scalars['String']>;
  _is_null?: Maybe<Scalars['Boolean']>;
  /** does the column match the given pattern */
  _like?: Maybe<Scalars['String']>;
  _lt?: Maybe<Scalars['String']>;
  _lte?: Maybe<Scalars['String']>;
  _neq?: Maybe<Scalars['String']>;
  /** does the column NOT match the given case-insensitive pattern */
  _nilike?: Maybe<Scalars['String']>;
  _nin?: Maybe<Array<Scalars['String']>>;
  /** does the column NOT match the given POSIX regular expression, case insensitive */
  _niregex?: Maybe<Scalars['String']>;
  /** does the column NOT match the given pattern */
  _nlike?: Maybe<Scalars['String']>;
  /** does the column NOT match the given POSIX regular expression, case sensitive */
  _nregex?: Maybe<Scalars['String']>;
  /** does the column NOT match the given SQL regular expression */
  _nsimilar?: Maybe<Scalars['String']>;
  /** does the column match the given POSIX regular expression, case sensitive */
  _regex?: Maybe<Scalars['String']>;
  /** does the column match the given SQL regular expression */
  _similar?: Maybe<Scalars['String']>;
};

/** columns and relationships of "activity_logins" */
export type ActivityLogin = {
  __typename?: 'activityLogin';
  id: Scalars['Int'];
  ipAddress: Scalars['String'];
  timestamp: Scalars['timestamptz'];
  /** An object relationship */
  user: User;
  userId: Scalars['Int'];
};

/** aggregated selection of "activity_logins" */
export type ActivityLogin_Aggregate = {
  __typename?: 'activityLogin_aggregate';
  aggregate?: Maybe<ActivityLogin_Aggregate_Fields>;
  nodes: Array<ActivityLogin>;
};

/** aggregate fields of "activity_logins" */
export type ActivityLogin_Aggregate_Fields = {
  __typename?: 'activityLogin_aggregate_fields';
  avg?: Maybe<ActivityLogin_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<ActivityLogin_Max_Fields>;
  min?: Maybe<ActivityLogin_Min_Fields>;
  stddev?: Maybe<ActivityLogin_Stddev_Fields>;
  stddev_pop?: Maybe<ActivityLogin_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<ActivityLogin_Stddev_Samp_Fields>;
  sum?: Maybe<ActivityLogin_Sum_Fields>;
  var_pop?: Maybe<ActivityLogin_Var_Pop_Fields>;
  var_samp?: Maybe<ActivityLogin_Var_Samp_Fields>;
  variance?: Maybe<ActivityLogin_Variance_Fields>;
};


/** aggregate fields of "activity_logins" */
export type ActivityLogin_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<ActivityLogin_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "activity_logins" */
export type ActivityLogin_Aggregate_Order_By = {
  avg?: Maybe<ActivityLogin_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<ActivityLogin_Max_Order_By>;
  min?: Maybe<ActivityLogin_Min_Order_By>;
  stddev?: Maybe<ActivityLogin_Stddev_Order_By>;
  stddev_pop?: Maybe<ActivityLogin_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<ActivityLogin_Stddev_Samp_Order_By>;
  sum?: Maybe<ActivityLogin_Sum_Order_By>;
  var_pop?: Maybe<ActivityLogin_Var_Pop_Order_By>;
  var_samp?: Maybe<ActivityLogin_Var_Samp_Order_By>;
  variance?: Maybe<ActivityLogin_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "activity_logins" */
export type ActivityLogin_Arr_Rel_Insert_Input = {
  data: Array<ActivityLogin_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<ActivityLogin_On_Conflict>;
};

/** aggregate avg on columns */
export type ActivityLogin_Avg_Fields = {
  __typename?: 'activityLogin_avg_fields';
  id?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "activity_logins" */
export type ActivityLogin_Avg_Order_By = {
  id?: Maybe<Order_By>;
  userId?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "activity_logins". All fields are combined with a logical 'AND'. */
export type ActivityLogin_Bool_Exp = {
  _and?: Maybe<Array<ActivityLogin_Bool_Exp>>;
  _not?: Maybe<ActivityLogin_Bool_Exp>;
  _or?: Maybe<Array<ActivityLogin_Bool_Exp>>;
  id?: Maybe<Int_Comparison_Exp>;
  ipAddress?: Maybe<String_Comparison_Exp>;
  timestamp?: Maybe<Timestamptz_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  userId?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "activity_logins" */
export enum ActivityLogin_Constraint {
  /** unique or primary key constraint */
  ActivityLoginsIdKey = 'activity_logins_id_key',
  /** unique or primary key constraint */
  ActivityLoginsPkey = 'activity_logins_pkey',
  /** unique or primary key constraint */
  ActivityLoginsUserIdTimestampKey = 'activity_logins_user_id_timestamp_key'
}

/** input type for incrementing numeric columns in table "activity_logins" */
export type ActivityLogin_Inc_Input = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "activity_logins" */
export type ActivityLogin_Insert_Input = {
  id?: Maybe<Scalars['Int']>;
  ipAddress?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['timestamptz']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  userId?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type ActivityLogin_Max_Fields = {
  __typename?: 'activityLogin_max_fields';
  id?: Maybe<Scalars['Int']>;
  ipAddress?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['timestamptz']>;
  userId?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "activity_logins" */
export type ActivityLogin_Max_Order_By = {
  id?: Maybe<Order_By>;
  ipAddress?: Maybe<Order_By>;
  timestamp?: Maybe<Order_By>;
  userId?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type ActivityLogin_Min_Fields = {
  __typename?: 'activityLogin_min_fields';
  id?: Maybe<Scalars['Int']>;
  ipAddress?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['timestamptz']>;
  userId?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "activity_logins" */
export type ActivityLogin_Min_Order_By = {
  id?: Maybe<Order_By>;
  ipAddress?: Maybe<Order_By>;
  timestamp?: Maybe<Order_By>;
  userId?: Maybe<Order_By>;
};

/** response of any mutation on the table "activity_logins" */
export type ActivityLogin_Mutation_Response = {
  __typename?: 'activityLogin_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<ActivityLogin>;
};

/** on conflict condition type for table "activity_logins" */
export type ActivityLogin_On_Conflict = {
  constraint: ActivityLogin_Constraint;
  update_columns?: Array<ActivityLogin_Update_Column>;
  where?: Maybe<ActivityLogin_Bool_Exp>;
};

/** Ordering options when selecting data from "activity_logins". */
export type ActivityLogin_Order_By = {
  id?: Maybe<Order_By>;
  ipAddress?: Maybe<Order_By>;
  timestamp?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  userId?: Maybe<Order_By>;
};

/** primary key columns input for table: activityLogin */
export type ActivityLogin_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "activity_logins" */
export enum ActivityLogin_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  IpAddress = 'ipAddress',
  /** column name */
  Timestamp = 'timestamp',
  /** column name */
  UserId = 'userId'
}

/** input type for updating data in table "activity_logins" */
export type ActivityLogin_Set_Input = {
  id?: Maybe<Scalars['Int']>;
  ipAddress?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['timestamptz']>;
  userId?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type ActivityLogin_Stddev_Fields = {
  __typename?: 'activityLogin_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "activity_logins" */
export type ActivityLogin_Stddev_Order_By = {
  id?: Maybe<Order_By>;
  userId?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type ActivityLogin_Stddev_Pop_Fields = {
  __typename?: 'activityLogin_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "activity_logins" */
export type ActivityLogin_Stddev_Pop_Order_By = {
  id?: Maybe<Order_By>;
  userId?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type ActivityLogin_Stddev_Samp_Fields = {
  __typename?: 'activityLogin_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "activity_logins" */
export type ActivityLogin_Stddev_Samp_Order_By = {
  id?: Maybe<Order_By>;
  userId?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type ActivityLogin_Sum_Fields = {
  __typename?: 'activityLogin_sum_fields';
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "activity_logins" */
export type ActivityLogin_Sum_Order_By = {
  id?: Maybe<Order_By>;
  userId?: Maybe<Order_By>;
};

/** update columns of table "activity_logins" */
export enum ActivityLogin_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  IpAddress = 'ipAddress',
  /** column name */
  Timestamp = 'timestamp',
  /** column name */
  UserId = 'userId'
}

/** aggregate var_pop on columns */
export type ActivityLogin_Var_Pop_Fields = {
  __typename?: 'activityLogin_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "activity_logins" */
export type ActivityLogin_Var_Pop_Order_By = {
  id?: Maybe<Order_By>;
  userId?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type ActivityLogin_Var_Samp_Fields = {
  __typename?: 'activityLogin_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "activity_logins" */
export type ActivityLogin_Var_Samp_Order_By = {
  id?: Maybe<Order_By>;
  userId?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type ActivityLogin_Variance_Fields = {
  __typename?: 'activityLogin_variance_fields';
  id?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "activity_logins" */
export type ActivityLogin_Variance_Order_By = {
  id?: Maybe<Order_By>;
  userId?: Maybe<Order_By>;
};

/** columns and relationships of "courses" */
export type Course = {
  __typename?: 'course';
  content: Scalars['String'];
  createdAt: Scalars['timestamptz'];
  createdById: Scalars['Int'];
  id: Scalars['Int'];
  premium: Scalars['Boolean'];
  price: Scalars['numeric'];
  sku: Scalars['String'];
  slug: Scalars['String'];
  status: Scalars['String'];
  summary: Scalars['String'];
  title: Scalars['String'];
  updatedAt: Scalars['timestamptz'];
  updatedById: Scalars['Int'];
  /** An object relationship */
  user: User;
  /** An object relationship */
  userByCreatedById: User;
};

/** aggregated selection of "courses" */
export type Course_Aggregate = {
  __typename?: 'course_aggregate';
  aggregate?: Maybe<Course_Aggregate_Fields>;
  nodes: Array<Course>;
};

/** aggregate fields of "courses" */
export type Course_Aggregate_Fields = {
  __typename?: 'course_aggregate_fields';
  avg?: Maybe<Course_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Course_Max_Fields>;
  min?: Maybe<Course_Min_Fields>;
  stddev?: Maybe<Course_Stddev_Fields>;
  stddev_pop?: Maybe<Course_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Course_Stddev_Samp_Fields>;
  sum?: Maybe<Course_Sum_Fields>;
  var_pop?: Maybe<Course_Var_Pop_Fields>;
  var_samp?: Maybe<Course_Var_Samp_Fields>;
  variance?: Maybe<Course_Variance_Fields>;
};


/** aggregate fields of "courses" */
export type Course_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Course_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "courses" */
export type Course_Aggregate_Order_By = {
  avg?: Maybe<Course_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Course_Max_Order_By>;
  min?: Maybe<Course_Min_Order_By>;
  stddev?: Maybe<Course_Stddev_Order_By>;
  stddev_pop?: Maybe<Course_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Course_Stddev_Samp_Order_By>;
  sum?: Maybe<Course_Sum_Order_By>;
  var_pop?: Maybe<Course_Var_Pop_Order_By>;
  var_samp?: Maybe<Course_Var_Samp_Order_By>;
  variance?: Maybe<Course_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "courses" */
export type Course_Arr_Rel_Insert_Input = {
  data: Array<Course_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Course_On_Conflict>;
};

/** aggregate avg on columns */
export type Course_Avg_Fields = {
  __typename?: 'course_avg_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "courses" */
export type Course_Avg_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "courses". All fields are combined with a logical 'AND'. */
export type Course_Bool_Exp = {
  _and?: Maybe<Array<Course_Bool_Exp>>;
  _not?: Maybe<Course_Bool_Exp>;
  _or?: Maybe<Array<Course_Bool_Exp>>;
  content?: Maybe<String_Comparison_Exp>;
  createdAt?: Maybe<Timestamptz_Comparison_Exp>;
  createdById?: Maybe<Int_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  premium?: Maybe<Boolean_Comparison_Exp>;
  price?: Maybe<Numeric_Comparison_Exp>;
  sku?: Maybe<String_Comparison_Exp>;
  slug?: Maybe<String_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
  summary?: Maybe<String_Comparison_Exp>;
  title?: Maybe<String_Comparison_Exp>;
  updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
  updatedById?: Maybe<Int_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  userByCreatedById?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "courses" */
export enum Course_Constraint {
  /** unique or primary key constraint */
  CoursesPkey = 'courses_pkey',
  /** unique or primary key constraint */
  CoursesSkuKey = 'courses_sku_key',
  /** unique or primary key constraint */
  CoursesSlugKey = 'courses_slug_key',
  /** unique or primary key constraint */
  CoursesTitleKey = 'courses_title_key'
}

/** input type for incrementing numeric columns in table "courses" */
export type Course_Inc_Input = {
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  price?: Maybe<Scalars['numeric']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "courses" */
export type Course_Insert_Input = {
  content?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  premium?: Maybe<Scalars['Boolean']>;
  price?: Maybe<Scalars['numeric']>;
  sku?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  summary?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  userByCreatedById?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Course_Max_Fields = {
  __typename?: 'course_max_fields';
  content?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  price?: Maybe<Scalars['numeric']>;
  sku?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  summary?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "courses" */
export type Course_Max_Order_By = {
  content?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  sku?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  summary?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Course_Min_Fields = {
  __typename?: 'course_min_fields';
  content?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  price?: Maybe<Scalars['numeric']>;
  sku?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  summary?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "courses" */
export type Course_Min_Order_By = {
  content?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  sku?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  summary?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** response of any mutation on the table "courses" */
export type Course_Mutation_Response = {
  __typename?: 'course_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Course>;
};

/** on conflict condition type for table "courses" */
export type Course_On_Conflict = {
  constraint: Course_Constraint;
  update_columns?: Array<Course_Update_Column>;
  where?: Maybe<Course_Bool_Exp>;
};

/** Ordering options when selecting data from "courses". */
export type Course_Order_By = {
  content?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  premium?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  sku?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  summary?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  userByCreatedById?: Maybe<User_Order_By>;
};

/** primary key columns input for table: course */
export type Course_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "courses" */
export enum Course_Select_Column {
  /** column name */
  Content = 'content',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedById = 'createdById',
  /** column name */
  Id = 'id',
  /** column name */
  Premium = 'premium',
  /** column name */
  Price = 'price',
  /** column name */
  Sku = 'sku',
  /** column name */
  Slug = 'slug',
  /** column name */
  Status = 'status',
  /** column name */
  Summary = 'summary',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedById = 'updatedById'
}

/** input type for updating data in table "courses" */
export type Course_Set_Input = {
  content?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  premium?: Maybe<Scalars['Boolean']>;
  price?: Maybe<Scalars['numeric']>;
  sku?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  summary?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Course_Stddev_Fields = {
  __typename?: 'course_stddev_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "courses" */
export type Course_Stddev_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Course_Stddev_Pop_Fields = {
  __typename?: 'course_stddev_pop_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "courses" */
export type Course_Stddev_Pop_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Course_Stddev_Samp_Fields = {
  __typename?: 'course_stddev_samp_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "courses" */
export type Course_Stddev_Samp_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Course_Sum_Fields = {
  __typename?: 'course_sum_fields';
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  price?: Maybe<Scalars['numeric']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "courses" */
export type Course_Sum_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** update columns of table "courses" */
export enum Course_Update_Column {
  /** column name */
  Content = 'content',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedById = 'createdById',
  /** column name */
  Id = 'id',
  /** column name */
  Premium = 'premium',
  /** column name */
  Price = 'price',
  /** column name */
  Sku = 'sku',
  /** column name */
  Slug = 'slug',
  /** column name */
  Status = 'status',
  /** column name */
  Summary = 'summary',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedById = 'updatedById'
}

/** aggregate var_pop on columns */
export type Course_Var_Pop_Fields = {
  __typename?: 'course_var_pop_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "courses" */
export type Course_Var_Pop_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Course_Var_Samp_Fields = {
  __typename?: 'course_var_samp_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "courses" */
export type Course_Var_Samp_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Course_Variance_Fields = {
  __typename?: 'course_variance_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "courses" */
export type Course_Variance_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  price?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'. */
export type Json_Comparison_Exp = {
  _eq?: Maybe<Scalars['json']>;
  _gt?: Maybe<Scalars['json']>;
  _gte?: Maybe<Scalars['json']>;
  _in?: Maybe<Array<Scalars['json']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['json']>;
  _lte?: Maybe<Scalars['json']>;
  _neq?: Maybe<Scalars['json']>;
  _nin?: Maybe<Array<Scalars['json']>>;
};

/** mutation root */
export type Mutation_Root = {
  __typename?: 'mutation_root';
  /** delete single row from the table: "activity_logins" */
  activityLoginDelete?: Maybe<ActivityLogin>;
  /** insert a single row into the table: "activity_logins" */
  activityLoginInsert?: Maybe<ActivityLogin>;
  /** update single row of the table: "activity_logins" */
  activityLoginUpdate?: Maybe<ActivityLogin>;
  /** delete data from the table: "activity_logins" */
  activityLoginsDelete?: Maybe<ActivityLogin_Mutation_Response>;
  /** insert data into the table: "activity_logins" */
  activityLoginsInsert?: Maybe<ActivityLogin_Mutation_Response>;
  /** update data of the table: "activity_logins" */
  activityLoginsUpdate?: Maybe<ActivityLogin_Mutation_Response>;
  /** delete single row from the table: "courses" */
  courseDelete?: Maybe<Course>;
  /** insert a single row into the table: "courses" */
  courseInsert?: Maybe<Course>;
  /** update single row of the table: "courses" */
  courseUpdate?: Maybe<Course>;
  /** delete data from the table: "courses" */
  coursesDelete?: Maybe<Course_Mutation_Response>;
  /** insert data into the table: "courses" */
  coursesInsert?: Maybe<Course_Mutation_Response>;
  /** update data of the table: "courses" */
  coursesUpdate?: Maybe<Course_Mutation_Response>;
  createAuth0User?: Maybe<Auth0Output>;
  /** delete single row from the table: "pages" */
  pageDelete?: Maybe<Page>;
  /** insert a single row into the table: "pages" */
  pageInsert?: Maybe<Page>;
  /** update single row of the table: "pages" */
  pageUpdate?: Maybe<Page>;
  /** delete data from the table: "pages" */
  pagesDelete?: Maybe<Page_Mutation_Response>;
  /** insert data into the table: "pages" */
  pagesInsert?: Maybe<Page_Mutation_Response>;
  /** update data of the table: "pages" */
  pagesUpdate?: Maybe<Page_Mutation_Response>;
  /** delete single row from the table: "posts" */
  postDelete?: Maybe<Post>;
  /** insert a single row into the table: "posts" */
  postInsert?: Maybe<Post>;
  /** update single row of the table: "posts" */
  postUpdate?: Maybe<Post>;
  /** delete data from the table: "posts" */
  postsDelete?: Maybe<Post_Mutation_Response>;
  /** insert data into the table: "posts" */
  postsInsert?: Maybe<Post_Mutation_Response>;
  /** update data of the table: "posts" */
  postsUpdate?: Maybe<Post_Mutation_Response>;
  /** delete single row from the table: "profiles" */
  profileDelete?: Maybe<Profile>;
  /** insert a single row into the table: "profiles" */
  profileInsert?: Maybe<Profile>;
  /** update single row of the table: "profiles" */
  profileUpdate?: Maybe<Profile>;
  /** delete data from the table: "profiles" */
  profilesDelete?: Maybe<Profile_Mutation_Response>;
  /** insert data into the table: "profiles" */
  profilesInsert?: Maybe<Profile_Mutation_Response>;
  /** update data of the table: "profiles" */
  profilesUpdate?: Maybe<Profile_Mutation_Response>;
  /** delete single row from the table: "roles" */
  roleDelete?: Maybe<Role>;
  /** insert a single row into the table: "roles" */
  roleInsert?: Maybe<Role>;
  /** update single row of the table: "roles" */
  roleUpdate?: Maybe<Role>;
  /** delete data from the table: "roles" */
  rolesDelete?: Maybe<Role_Mutation_Response>;
  /** insert data into the table: "roles" */
  rolesInsert?: Maybe<Role_Mutation_Response>;
  /** update data of the table: "roles" */
  rolesUpdate?: Maybe<Role_Mutation_Response>;
  /** delete single row from the table: "tags" */
  tagDelete?: Maybe<Tag>;
  /** insert a single row into the table: "tags" */
  tagInsert?: Maybe<Tag>;
  /** update single row of the table: "tags" */
  tagUpdate?: Maybe<Tag>;
  /** delete data from the table: "tags" */
  tagsDelete?: Maybe<Tag_Mutation_Response>;
  /** insert data into the table: "tags" */
  tagsInsert?: Maybe<Tag_Mutation_Response>;
  /** update data of the table: "tags" */
  tagsUpdate?: Maybe<Tag_Mutation_Response>;
  /** delete single row from the table: "topics" */
  topicDelete?: Maybe<Topic>;
  /** insert a single row into the table: "topics" */
  topicInsert?: Maybe<Topic>;
  /** update single row of the table: "topics" */
  topicUpdate?: Maybe<Topic>;
  /** delete data from the table: "topics" */
  topicsDelete?: Maybe<Topic_Mutation_Response>;
  /** insert data into the table: "topics" */
  topicsInsert?: Maybe<Topic_Mutation_Response>;
  /** update data of the table: "topics" */
  topicsUpdate?: Maybe<Topic_Mutation_Response>;
  /** delete single row from the table: "users" */
  userDelete?: Maybe<User>;
  /** insert a single row into the table: "users" */
  userInsert?: Maybe<User>;
  /** update single row of the table: "users" */
  userUpdate?: Maybe<User>;
  /** delete data from the table: "users" */
  usersDelete?: Maybe<User_Mutation_Response>;
  /** insert data into the table: "users" */
  usersInsert?: Maybe<User_Mutation_Response>;
  /** update data of the table: "users" */
  usersUpdate?: Maybe<User_Mutation_Response>;
};


/** mutation root */
export type Mutation_RootActivityLoginDeleteArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootActivityLoginInsertArgs = {
  object: ActivityLogin_Insert_Input;
  on_conflict?: Maybe<ActivityLogin_On_Conflict>;
};


/** mutation root */
export type Mutation_RootActivityLoginUpdateArgs = {
  _inc?: Maybe<ActivityLogin_Inc_Input>;
  _set?: Maybe<ActivityLogin_Set_Input>;
  pk_columns: ActivityLogin_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootActivityLoginsDeleteArgs = {
  where: ActivityLogin_Bool_Exp;
};


/** mutation root */
export type Mutation_RootActivityLoginsInsertArgs = {
  objects: Array<ActivityLogin_Insert_Input>;
  on_conflict?: Maybe<ActivityLogin_On_Conflict>;
};


/** mutation root */
export type Mutation_RootActivityLoginsUpdateArgs = {
  _inc?: Maybe<ActivityLogin_Inc_Input>;
  _set?: Maybe<ActivityLogin_Set_Input>;
  where: ActivityLogin_Bool_Exp;
};


/** mutation root */
export type Mutation_RootCourseDeleteArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootCourseInsertArgs = {
  object: Course_Insert_Input;
  on_conflict?: Maybe<Course_On_Conflict>;
};


/** mutation root */
export type Mutation_RootCourseUpdateArgs = {
  _inc?: Maybe<Course_Inc_Input>;
  _set?: Maybe<Course_Set_Input>;
  pk_columns: Course_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootCoursesDeleteArgs = {
  where: Course_Bool_Exp;
};


/** mutation root */
export type Mutation_RootCoursesInsertArgs = {
  objects: Array<Course_Insert_Input>;
  on_conflict?: Maybe<Course_On_Conflict>;
};


/** mutation root */
export type Mutation_RootCoursesUpdateArgs = {
  _inc?: Maybe<Course_Inc_Input>;
  _set?: Maybe<Course_Set_Input>;
  where: Course_Bool_Exp;
};


/** mutation root */
export type Mutation_RootCreateAuth0UserArgs = {
  arg1: Auth0Input;
};


/** mutation root */
export type Mutation_RootPageDeleteArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootPageInsertArgs = {
  object: Page_Insert_Input;
  on_conflict?: Maybe<Page_On_Conflict>;
};


/** mutation root */
export type Mutation_RootPageUpdateArgs = {
  _inc?: Maybe<Page_Inc_Input>;
  _set?: Maybe<Page_Set_Input>;
  pk_columns: Page_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootPagesDeleteArgs = {
  where: Page_Bool_Exp;
};


/** mutation root */
export type Mutation_RootPagesInsertArgs = {
  objects: Array<Page_Insert_Input>;
  on_conflict?: Maybe<Page_On_Conflict>;
};


/** mutation root */
export type Mutation_RootPagesUpdateArgs = {
  _inc?: Maybe<Page_Inc_Input>;
  _set?: Maybe<Page_Set_Input>;
  where: Page_Bool_Exp;
};


/** mutation root */
export type Mutation_RootPostDeleteArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootPostInsertArgs = {
  object: Post_Insert_Input;
  on_conflict?: Maybe<Post_On_Conflict>;
};


/** mutation root */
export type Mutation_RootPostUpdateArgs = {
  _inc?: Maybe<Post_Inc_Input>;
  _set?: Maybe<Post_Set_Input>;
  pk_columns: Post_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootPostsDeleteArgs = {
  where: Post_Bool_Exp;
};


/** mutation root */
export type Mutation_RootPostsInsertArgs = {
  objects: Array<Post_Insert_Input>;
  on_conflict?: Maybe<Post_On_Conflict>;
};


/** mutation root */
export type Mutation_RootPostsUpdateArgs = {
  _inc?: Maybe<Post_Inc_Input>;
  _set?: Maybe<Post_Set_Input>;
  where: Post_Bool_Exp;
};


/** mutation root */
export type Mutation_RootProfileDeleteArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootProfileInsertArgs = {
  object: Profile_Insert_Input;
  on_conflict?: Maybe<Profile_On_Conflict>;
};


/** mutation root */
export type Mutation_RootProfileUpdateArgs = {
  _inc?: Maybe<Profile_Inc_Input>;
  _set?: Maybe<Profile_Set_Input>;
  pk_columns: Profile_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootProfilesDeleteArgs = {
  where: Profile_Bool_Exp;
};


/** mutation root */
export type Mutation_RootProfilesInsertArgs = {
  objects: Array<Profile_Insert_Input>;
  on_conflict?: Maybe<Profile_On_Conflict>;
};


/** mutation root */
export type Mutation_RootProfilesUpdateArgs = {
  _inc?: Maybe<Profile_Inc_Input>;
  _set?: Maybe<Profile_Set_Input>;
  where: Profile_Bool_Exp;
};


/** mutation root */
export type Mutation_RootRoleDeleteArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootRoleInsertArgs = {
  object: Role_Insert_Input;
  on_conflict?: Maybe<Role_On_Conflict>;
};


/** mutation root */
export type Mutation_RootRoleUpdateArgs = {
  _inc?: Maybe<Role_Inc_Input>;
  _set?: Maybe<Role_Set_Input>;
  pk_columns: Role_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootRolesDeleteArgs = {
  where: Role_Bool_Exp;
};


/** mutation root */
export type Mutation_RootRolesInsertArgs = {
  objects: Array<Role_Insert_Input>;
  on_conflict?: Maybe<Role_On_Conflict>;
};


/** mutation root */
export type Mutation_RootRolesUpdateArgs = {
  _inc?: Maybe<Role_Inc_Input>;
  _set?: Maybe<Role_Set_Input>;
  where: Role_Bool_Exp;
};


/** mutation root */
export type Mutation_RootTagDeleteArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootTagInsertArgs = {
  object: Tag_Insert_Input;
  on_conflict?: Maybe<Tag_On_Conflict>;
};


/** mutation root */
export type Mutation_RootTagUpdateArgs = {
  _inc?: Maybe<Tag_Inc_Input>;
  _set?: Maybe<Tag_Set_Input>;
  pk_columns: Tag_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootTagsDeleteArgs = {
  where: Tag_Bool_Exp;
};


/** mutation root */
export type Mutation_RootTagsInsertArgs = {
  objects: Array<Tag_Insert_Input>;
  on_conflict?: Maybe<Tag_On_Conflict>;
};


/** mutation root */
export type Mutation_RootTagsUpdateArgs = {
  _inc?: Maybe<Tag_Inc_Input>;
  _set?: Maybe<Tag_Set_Input>;
  where: Tag_Bool_Exp;
};


/** mutation root */
export type Mutation_RootTopicDeleteArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootTopicInsertArgs = {
  object: Topic_Insert_Input;
  on_conflict?: Maybe<Topic_On_Conflict>;
};


/** mutation root */
export type Mutation_RootTopicUpdateArgs = {
  _inc?: Maybe<Topic_Inc_Input>;
  _set?: Maybe<Topic_Set_Input>;
  pk_columns: Topic_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootTopicsDeleteArgs = {
  where: Topic_Bool_Exp;
};


/** mutation root */
export type Mutation_RootTopicsInsertArgs = {
  objects: Array<Topic_Insert_Input>;
  on_conflict?: Maybe<Topic_On_Conflict>;
};


/** mutation root */
export type Mutation_RootTopicsUpdateArgs = {
  _inc?: Maybe<Topic_Inc_Input>;
  _set?: Maybe<Topic_Set_Input>;
  where: Topic_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUserDeleteArgs = {
  id: Scalars['Int'];
};


/** mutation root */
export type Mutation_RootUserInsertArgs = {
  object: User_Insert_Input;
  on_conflict?: Maybe<User_On_Conflict>;
};


/** mutation root */
export type Mutation_RootUserUpdateArgs = {
  _inc?: Maybe<User_Inc_Input>;
  _set?: Maybe<User_Set_Input>;
  pk_columns: User_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUsersDeleteArgs = {
  where: User_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUsersInsertArgs = {
  objects: Array<User_Insert_Input>;
  on_conflict?: Maybe<User_On_Conflict>;
};


/** mutation root */
export type Mutation_RootUsersUpdateArgs = {
  _inc?: Maybe<User_Inc_Input>;
  _set?: Maybe<User_Set_Input>;
  where: User_Bool_Exp;
};

/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
export type Numeric_Comparison_Exp = {
  _eq?: Maybe<Scalars['numeric']>;
  _gt?: Maybe<Scalars['numeric']>;
  _gte?: Maybe<Scalars['numeric']>;
  _in?: Maybe<Array<Scalars['numeric']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['numeric']>;
  _lte?: Maybe<Scalars['numeric']>;
  _neq?: Maybe<Scalars['numeric']>;
  _nin?: Maybe<Array<Scalars['numeric']>>;
};

/** column ordering options */
export enum Order_By {
  /** in ascending order, nulls last */
  Asc = 'asc',
  /** in ascending order, nulls first */
  AscNullsFirst = 'asc_nulls_first',
  /** in ascending order, nulls last */
  AscNullsLast = 'asc_nulls_last',
  /** in descending order, nulls first */
  Desc = 'desc',
  /** in descending order, nulls first */
  DescNullsFirst = 'desc_nulls_first',
  /** in descending order, nulls last */
  DescNullsLast = 'desc_nulls_last'
}

/** columns and relationships of "pages" */
export type Page = {
  __typename?: 'page';
  body: Scalars['String'];
  createdAt: Scalars['timestamptz'];
  createdById: Scalars['Int'];
  id: Scalars['Int'];
  slug: Scalars['String'];
  status: Scalars['String'];
  title: Scalars['String'];
  updatedAt: Scalars['timestamptz'];
  updatedById: Scalars['Int'];
  /** An object relationship */
  user: User;
  /** An object relationship */
  userByUpdatedById: User;
};

/** aggregated selection of "pages" */
export type Page_Aggregate = {
  __typename?: 'page_aggregate';
  aggregate?: Maybe<Page_Aggregate_Fields>;
  nodes: Array<Page>;
};

/** aggregate fields of "pages" */
export type Page_Aggregate_Fields = {
  __typename?: 'page_aggregate_fields';
  avg?: Maybe<Page_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Page_Max_Fields>;
  min?: Maybe<Page_Min_Fields>;
  stddev?: Maybe<Page_Stddev_Fields>;
  stddev_pop?: Maybe<Page_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Page_Stddev_Samp_Fields>;
  sum?: Maybe<Page_Sum_Fields>;
  var_pop?: Maybe<Page_Var_Pop_Fields>;
  var_samp?: Maybe<Page_Var_Samp_Fields>;
  variance?: Maybe<Page_Variance_Fields>;
};


/** aggregate fields of "pages" */
export type Page_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Page_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "pages" */
export type Page_Aggregate_Order_By = {
  avg?: Maybe<Page_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Page_Max_Order_By>;
  min?: Maybe<Page_Min_Order_By>;
  stddev?: Maybe<Page_Stddev_Order_By>;
  stddev_pop?: Maybe<Page_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Page_Stddev_Samp_Order_By>;
  sum?: Maybe<Page_Sum_Order_By>;
  var_pop?: Maybe<Page_Var_Pop_Order_By>;
  var_samp?: Maybe<Page_Var_Samp_Order_By>;
  variance?: Maybe<Page_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "pages" */
export type Page_Arr_Rel_Insert_Input = {
  data: Array<Page_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Page_On_Conflict>;
};

/** aggregate avg on columns */
export type Page_Avg_Fields = {
  __typename?: 'page_avg_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "pages" */
export type Page_Avg_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "pages". All fields are combined with a logical 'AND'. */
export type Page_Bool_Exp = {
  _and?: Maybe<Array<Page_Bool_Exp>>;
  _not?: Maybe<Page_Bool_Exp>;
  _or?: Maybe<Array<Page_Bool_Exp>>;
  body?: Maybe<String_Comparison_Exp>;
  createdAt?: Maybe<Timestamptz_Comparison_Exp>;
  createdById?: Maybe<Int_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  slug?: Maybe<String_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
  title?: Maybe<String_Comparison_Exp>;
  updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
  updatedById?: Maybe<Int_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  userByUpdatedById?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "pages" */
export enum Page_Constraint {
  /** unique or primary key constraint */
  PagesPkey = 'pages_pkey',
  /** unique or primary key constraint */
  PagesSlugKey = 'pages_slug_key',
  /** unique or primary key constraint */
  PagesTitleKey = 'pages_title_key'
}

/** input type for incrementing numeric columns in table "pages" */
export type Page_Inc_Input = {
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "pages" */
export type Page_Insert_Input = {
  body?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  userByUpdatedById?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Page_Max_Fields = {
  __typename?: 'page_max_fields';
  body?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "pages" */
export type Page_Max_Order_By = {
  body?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Page_Min_Fields = {
  __typename?: 'page_min_fields';
  body?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "pages" */
export type Page_Min_Order_By = {
  body?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** response of any mutation on the table "pages" */
export type Page_Mutation_Response = {
  __typename?: 'page_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Page>;
};

/** on conflict condition type for table "pages" */
export type Page_On_Conflict = {
  constraint: Page_Constraint;
  update_columns?: Array<Page_Update_Column>;
  where?: Maybe<Page_Bool_Exp>;
};

/** Ordering options when selecting data from "pages". */
export type Page_Order_By = {
  body?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  userByUpdatedById?: Maybe<User_Order_By>;
};

/** primary key columns input for table: page */
export type Page_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "pages" */
export enum Page_Select_Column {
  /** column name */
  Body = 'body',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedById = 'createdById',
  /** column name */
  Id = 'id',
  /** column name */
  Slug = 'slug',
  /** column name */
  Status = 'status',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedById = 'updatedById'
}

/** input type for updating data in table "pages" */
export type Page_Set_Input = {
  body?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Page_Stddev_Fields = {
  __typename?: 'page_stddev_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "pages" */
export type Page_Stddev_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Page_Stddev_Pop_Fields = {
  __typename?: 'page_stddev_pop_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "pages" */
export type Page_Stddev_Pop_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Page_Stddev_Samp_Fields = {
  __typename?: 'page_stddev_samp_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "pages" */
export type Page_Stddev_Samp_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Page_Sum_Fields = {
  __typename?: 'page_sum_fields';
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "pages" */
export type Page_Sum_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** update columns of table "pages" */
export enum Page_Update_Column {
  /** column name */
  Body = 'body',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedById = 'createdById',
  /** column name */
  Id = 'id',
  /** column name */
  Slug = 'slug',
  /** column name */
  Status = 'status',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedById = 'updatedById'
}

/** aggregate var_pop on columns */
export type Page_Var_Pop_Fields = {
  __typename?: 'page_var_pop_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "pages" */
export type Page_Var_Pop_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Page_Var_Samp_Fields = {
  __typename?: 'page_var_samp_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "pages" */
export type Page_Var_Samp_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Page_Variance_Fields = {
  __typename?: 'page_variance_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "pages" */
export type Page_Variance_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** columns and relationships of "posts" */
export type Post = {
  __typename?: 'post';
  content: Scalars['String'];
  createdAt: Scalars['timestamptz'];
  createdById: Scalars['Int'];
  id: Scalars['Int'];
  slug: Scalars['String'];
  status: Scalars['String'];
  summary: Scalars['String'];
  tagIds: Scalars['json'];
  title: Scalars['String'];
  topicIds: Scalars['json'];
  updatedAt: Scalars['timestamptz'];
  updatedById: Scalars['Int'];
  /** An object relationship */
  userByCreatedById: User;
  /** An object relationship */
  userByUpdatedById: User;
};


/** columns and relationships of "posts" */
export type PostTagIdsArgs = {
  path?: Maybe<Scalars['String']>;
};


/** columns and relationships of "posts" */
export type PostTopicIdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "posts" */
export type Post_Aggregate = {
  __typename?: 'post_aggregate';
  aggregate?: Maybe<Post_Aggregate_Fields>;
  nodes: Array<Post>;
};

/** aggregate fields of "posts" */
export type Post_Aggregate_Fields = {
  __typename?: 'post_aggregate_fields';
  avg?: Maybe<Post_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Post_Max_Fields>;
  min?: Maybe<Post_Min_Fields>;
  stddev?: Maybe<Post_Stddev_Fields>;
  stddev_pop?: Maybe<Post_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Post_Stddev_Samp_Fields>;
  sum?: Maybe<Post_Sum_Fields>;
  var_pop?: Maybe<Post_Var_Pop_Fields>;
  var_samp?: Maybe<Post_Var_Samp_Fields>;
  variance?: Maybe<Post_Variance_Fields>;
};


/** aggregate fields of "posts" */
export type Post_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Post_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "posts" */
export type Post_Aggregate_Order_By = {
  avg?: Maybe<Post_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Post_Max_Order_By>;
  min?: Maybe<Post_Min_Order_By>;
  stddev?: Maybe<Post_Stddev_Order_By>;
  stddev_pop?: Maybe<Post_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Post_Stddev_Samp_Order_By>;
  sum?: Maybe<Post_Sum_Order_By>;
  var_pop?: Maybe<Post_Var_Pop_Order_By>;
  var_samp?: Maybe<Post_Var_Samp_Order_By>;
  variance?: Maybe<Post_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "posts" */
export type Post_Arr_Rel_Insert_Input = {
  data: Array<Post_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Post_On_Conflict>;
};

/** aggregate avg on columns */
export type Post_Avg_Fields = {
  __typename?: 'post_avg_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "posts" */
export type Post_Avg_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "posts". All fields are combined with a logical 'AND'. */
export type Post_Bool_Exp = {
  _and?: Maybe<Array<Post_Bool_Exp>>;
  _not?: Maybe<Post_Bool_Exp>;
  _or?: Maybe<Array<Post_Bool_Exp>>;
  content?: Maybe<String_Comparison_Exp>;
  createdAt?: Maybe<Timestamptz_Comparison_Exp>;
  createdById?: Maybe<Int_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  slug?: Maybe<String_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
  summary?: Maybe<String_Comparison_Exp>;
  tagIds?: Maybe<Json_Comparison_Exp>;
  title?: Maybe<String_Comparison_Exp>;
  topicIds?: Maybe<Json_Comparison_Exp>;
  updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
  updatedById?: Maybe<Int_Comparison_Exp>;
  userByCreatedById?: Maybe<User_Bool_Exp>;
  userByUpdatedById?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "posts" */
export enum Post_Constraint {
  /** unique or primary key constraint */
  PostsPkey = 'posts_pkey',
  /** unique or primary key constraint */
  PostsSlugKey = 'posts_slug_key',
  /** unique or primary key constraint */
  PostsTitleKey = 'posts_title_key'
}

/** input type for incrementing numeric columns in table "posts" */
export type Post_Inc_Input = {
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "posts" */
export type Post_Insert_Input = {
  content?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  summary?: Maybe<Scalars['String']>;
  tagIds?: Maybe<Scalars['json']>;
  title?: Maybe<Scalars['String']>;
  topicIds?: Maybe<Scalars['json']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
  userByCreatedById?: Maybe<User_Obj_Rel_Insert_Input>;
  userByUpdatedById?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Post_Max_Fields = {
  __typename?: 'post_max_fields';
  content?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  summary?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "posts" */
export type Post_Max_Order_By = {
  content?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  summary?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Post_Min_Fields = {
  __typename?: 'post_min_fields';
  content?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  summary?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "posts" */
export type Post_Min_Order_By = {
  content?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  summary?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** response of any mutation on the table "posts" */
export type Post_Mutation_Response = {
  __typename?: 'post_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Post>;
};

/** on conflict condition type for table "posts" */
export type Post_On_Conflict = {
  constraint: Post_Constraint;
  update_columns?: Array<Post_Update_Column>;
  where?: Maybe<Post_Bool_Exp>;
};

/** Ordering options when selecting data from "posts". */
export type Post_Order_By = {
  content?: Maybe<Order_By>;
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  summary?: Maybe<Order_By>;
  tagIds?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  topicIds?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
  userByCreatedById?: Maybe<User_Order_By>;
  userByUpdatedById?: Maybe<User_Order_By>;
};

/** primary key columns input for table: post */
export type Post_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "posts" */
export enum Post_Select_Column {
  /** column name */
  Content = 'content',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedById = 'createdById',
  /** column name */
  Id = 'id',
  /** column name */
  Slug = 'slug',
  /** column name */
  Status = 'status',
  /** column name */
  Summary = 'summary',
  /** column name */
  TagIds = 'tagIds',
  /** column name */
  Title = 'title',
  /** column name */
  TopicIds = 'topicIds',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedById = 'updatedById'
}

/** input type for updating data in table "posts" */
export type Post_Set_Input = {
  content?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  summary?: Maybe<Scalars['String']>;
  tagIds?: Maybe<Scalars['json']>;
  title?: Maybe<Scalars['String']>;
  topicIds?: Maybe<Scalars['json']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Post_Stddev_Fields = {
  __typename?: 'post_stddev_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "posts" */
export type Post_Stddev_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Post_Stddev_Pop_Fields = {
  __typename?: 'post_stddev_pop_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "posts" */
export type Post_Stddev_Pop_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Post_Stddev_Samp_Fields = {
  __typename?: 'post_stddev_samp_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "posts" */
export type Post_Stddev_Samp_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Post_Sum_Fields = {
  __typename?: 'post_sum_fields';
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "posts" */
export type Post_Sum_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** update columns of table "posts" */
export enum Post_Update_Column {
  /** column name */
  Content = 'content',
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedById = 'createdById',
  /** column name */
  Id = 'id',
  /** column name */
  Slug = 'slug',
  /** column name */
  Status = 'status',
  /** column name */
  Summary = 'summary',
  /** column name */
  TagIds = 'tagIds',
  /** column name */
  Title = 'title',
  /** column name */
  TopicIds = 'topicIds',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedById = 'updatedById'
}

/** aggregate var_pop on columns */
export type Post_Var_Pop_Fields = {
  __typename?: 'post_var_pop_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "posts" */
export type Post_Var_Pop_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Post_Var_Samp_Fields = {
  __typename?: 'post_var_samp_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "posts" */
export type Post_Var_Samp_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Post_Variance_Fields = {
  __typename?: 'post_variance_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "posts" */
export type Post_Variance_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** columns and relationships of "profiles" */
export type Profile = {
  __typename?: 'profile';
  avatarUrl?: Maybe<Scalars['String']>;
  biography?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  isPublic: Scalars['Boolean'];
  links?: Maybe<Scalars['json']>;
  location?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneVerified?: Maybe<Scalars['Boolean']>;
  slug: Scalars['String'];
  /** An object relationship */
  user: User;
  userId: Scalars['Int'];
};


/** columns and relationships of "profiles" */
export type ProfileLinksArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "profiles" */
export type Profile_Aggregate = {
  __typename?: 'profile_aggregate';
  aggregate?: Maybe<Profile_Aggregate_Fields>;
  nodes: Array<Profile>;
};

/** aggregate fields of "profiles" */
export type Profile_Aggregate_Fields = {
  __typename?: 'profile_aggregate_fields';
  avg?: Maybe<Profile_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Profile_Max_Fields>;
  min?: Maybe<Profile_Min_Fields>;
  stddev?: Maybe<Profile_Stddev_Fields>;
  stddev_pop?: Maybe<Profile_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Profile_Stddev_Samp_Fields>;
  sum?: Maybe<Profile_Sum_Fields>;
  var_pop?: Maybe<Profile_Var_Pop_Fields>;
  var_samp?: Maybe<Profile_Var_Samp_Fields>;
  variance?: Maybe<Profile_Variance_Fields>;
};


/** aggregate fields of "profiles" */
export type Profile_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Profile_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Profile_Avg_Fields = {
  __typename?: 'profile_avg_fields';
  id?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "profiles". All fields are combined with a logical 'AND'. */
export type Profile_Bool_Exp = {
  _and?: Maybe<Array<Profile_Bool_Exp>>;
  _not?: Maybe<Profile_Bool_Exp>;
  _or?: Maybe<Array<Profile_Bool_Exp>>;
  avatarUrl?: Maybe<String_Comparison_Exp>;
  biography?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  isPublic?: Maybe<Boolean_Comparison_Exp>;
  links?: Maybe<Json_Comparison_Exp>;
  location?: Maybe<String_Comparison_Exp>;
  phoneNumber?: Maybe<String_Comparison_Exp>;
  phoneVerified?: Maybe<Boolean_Comparison_Exp>;
  slug?: Maybe<String_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  userId?: Maybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "profiles" */
export enum Profile_Constraint {
  /** unique or primary key constraint */
  UserMetaPkey = 'user_meta_pkey',
  /** unique or primary key constraint */
  UserMetaUserIdKey = 'user_meta_user_Id_key',
  /** unique or primary key constraint */
  UserProfilesPhoneNumberKey = 'user_profiles_phone_number_key',
  /** unique or primary key constraint */
  UserProfilesSlugKey = 'user_profiles_slug_key'
}

/** input type for incrementing numeric columns in table "profiles" */
export type Profile_Inc_Input = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "profiles" */
export type Profile_Insert_Input = {
  avatarUrl?: Maybe<Scalars['String']>;
  biography?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  links?: Maybe<Scalars['json']>;
  location?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneVerified?: Maybe<Scalars['Boolean']>;
  slug?: Maybe<Scalars['String']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  userId?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Profile_Max_Fields = {
  __typename?: 'profile_max_fields';
  avatarUrl?: Maybe<Scalars['String']>;
  biography?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  location?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
};

/** aggregate min on columns */
export type Profile_Min_Fields = {
  __typename?: 'profile_min_fields';
  avatarUrl?: Maybe<Scalars['String']>;
  biography?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  location?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
};

/** response of any mutation on the table "profiles" */
export type Profile_Mutation_Response = {
  __typename?: 'profile_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Profile>;
};

/** input type for inserting object relation for remote table "profiles" */
export type Profile_Obj_Rel_Insert_Input = {
  data: Profile_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Profile_On_Conflict>;
};

/** on conflict condition type for table "profiles" */
export type Profile_On_Conflict = {
  constraint: Profile_Constraint;
  update_columns?: Array<Profile_Update_Column>;
  where?: Maybe<Profile_Bool_Exp>;
};

/** Ordering options when selecting data from "profiles". */
export type Profile_Order_By = {
  avatarUrl?: Maybe<Order_By>;
  biography?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  isPublic?: Maybe<Order_By>;
  links?: Maybe<Order_By>;
  location?: Maybe<Order_By>;
  phoneNumber?: Maybe<Order_By>;
  phoneVerified?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  userId?: Maybe<Order_By>;
};

/** primary key columns input for table: profile */
export type Profile_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "profiles" */
export enum Profile_Select_Column {
  /** column name */
  AvatarUrl = 'avatarUrl',
  /** column name */
  Biography = 'biography',
  /** column name */
  Id = 'id',
  /** column name */
  IsPublic = 'isPublic',
  /** column name */
  Links = 'links',
  /** column name */
  Location = 'location',
  /** column name */
  PhoneNumber = 'phoneNumber',
  /** column name */
  PhoneVerified = 'phoneVerified',
  /** column name */
  Slug = 'slug',
  /** column name */
  UserId = 'userId'
}

/** input type for updating data in table "profiles" */
export type Profile_Set_Input = {
  avatarUrl?: Maybe<Scalars['String']>;
  biography?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  links?: Maybe<Scalars['json']>;
  location?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneVerified?: Maybe<Scalars['Boolean']>;
  slug?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Profile_Stddev_Fields = {
  __typename?: 'profile_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Profile_Stddev_Pop_Fields = {
  __typename?: 'profile_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Profile_Stddev_Samp_Fields = {
  __typename?: 'profile_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['Float']>;
};

/** aggregate sum on columns */
export type Profile_Sum_Fields = {
  __typename?: 'profile_sum_fields';
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
};

/** update columns of table "profiles" */
export enum Profile_Update_Column {
  /** column name */
  AvatarUrl = 'avatarUrl',
  /** column name */
  Biography = 'biography',
  /** column name */
  Id = 'id',
  /** column name */
  IsPublic = 'isPublic',
  /** column name */
  Links = 'links',
  /** column name */
  Location = 'location',
  /** column name */
  PhoneNumber = 'phoneNumber',
  /** column name */
  PhoneVerified = 'phoneVerified',
  /** column name */
  Slug = 'slug',
  /** column name */
  UserId = 'userId'
}

/** aggregate var_pop on columns */
export type Profile_Var_Pop_Fields = {
  __typename?: 'profile_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Profile_Var_Samp_Fields = {
  __typename?: 'profile_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Profile_Variance_Fields = {
  __typename?: 'profile_variance_fields';
  id?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['Float']>;
};

export type Query_Root = {
  __typename?: 'query_root';
  /** fetch data from the table: "activity_logins" using primary key columns */
  activityLogin?: Maybe<ActivityLogin>;
  /** fetch data from the table: "activity_logins" */
  activityLogins: Array<ActivityLogin>;
  /** fetch aggregated fields from the table: "activity_logins" */
  activityLoginsAggregate: ActivityLogin_Aggregate;
  /** fetch data from the table: "courses" using primary key columns */
  course?: Maybe<Course>;
  /** An array relationship */
  courses: Array<Course>;
  /** fetch aggregated fields from the table: "courses" */
  coursesAggregate: Course_Aggregate;
  /** fetch data from the table: "pages" using primary key columns */
  page?: Maybe<Page>;
  /** An array relationship */
  pages: Array<Page>;
  /** fetch aggregated fields from the table: "pages" */
  pagesAggregate: Page_Aggregate;
  /** fetch data from the table: "posts" using primary key columns */
  post?: Maybe<Post>;
  /** An array relationship */
  posts: Array<Post>;
  /** fetch aggregated fields from the table: "posts" */
  postsAggregate: Post_Aggregate;
  /** fetch data from the table: "profiles" using primary key columns */
  profile?: Maybe<Profile>;
  /** fetch data from the table: "profiles" */
  profiles: Array<Profile>;
  /** fetch aggregated fields from the table: "profiles" */
  profilesAggregate: Profile_Aggregate;
  /** fetch data from the table: "roles" using primary key columns */
  role?: Maybe<Role>;
  /** fetch data from the table: "roles" */
  roles: Array<Role>;
  /** fetch aggregated fields from the table: "roles" */
  rolesAggregate: Role_Aggregate;
  /** fetch data from the table: "tags" using primary key columns */
  tag?: Maybe<Tag>;
  /** fetch data from the table: "tags" */
  tags: Array<Tag>;
  /** fetch aggregated fields from the table: "tags" */
  tagsAggregate: Tag_Aggregate;
  /** fetch data from the table: "topics" using primary key columns */
  topic?: Maybe<Topic>;
  /** An array relationship */
  topics: Array<Topic>;
  /** fetch aggregated fields from the table: "topics" */
  topicsAggregate: Topic_Aggregate;
  /** fetch data from the table: "users" using primary key columns */
  user?: Maybe<User>;
  /** An array relationship */
  users: Array<User>;
  /** fetch aggregated fields from the table: "users" */
  usersAggregate: User_Aggregate;
};


export type Query_RootActivityLoginArgs = {
  id: Scalars['Int'];
};


export type Query_RootActivityLoginsArgs = {
  distinct_on?: Maybe<Array<ActivityLogin_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ActivityLogin_Order_By>>;
  where?: Maybe<ActivityLogin_Bool_Exp>;
};


export type Query_RootActivityLoginsAggregateArgs = {
  distinct_on?: Maybe<Array<ActivityLogin_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ActivityLogin_Order_By>>;
  where?: Maybe<ActivityLogin_Bool_Exp>;
};


export type Query_RootCourseArgs = {
  id: Scalars['Int'];
};


export type Query_RootCoursesArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


export type Query_RootCoursesAggregateArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


export type Query_RootPageArgs = {
  id: Scalars['Int'];
};


export type Query_RootPagesArgs = {
  distinct_on?: Maybe<Array<Page_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Page_Order_By>>;
  where?: Maybe<Page_Bool_Exp>;
};


export type Query_RootPagesAggregateArgs = {
  distinct_on?: Maybe<Array<Page_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Page_Order_By>>;
  where?: Maybe<Page_Bool_Exp>;
};


export type Query_RootPostArgs = {
  id: Scalars['Int'];
};


export type Query_RootPostsArgs = {
  distinct_on?: Maybe<Array<Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Post_Order_By>>;
  where?: Maybe<Post_Bool_Exp>;
};


export type Query_RootPostsAggregateArgs = {
  distinct_on?: Maybe<Array<Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Post_Order_By>>;
  where?: Maybe<Post_Bool_Exp>;
};


export type Query_RootProfileArgs = {
  id: Scalars['Int'];
};


export type Query_RootProfilesArgs = {
  distinct_on?: Maybe<Array<Profile_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Profile_Order_By>>;
  where?: Maybe<Profile_Bool_Exp>;
};


export type Query_RootProfilesAggregateArgs = {
  distinct_on?: Maybe<Array<Profile_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Profile_Order_By>>;
  where?: Maybe<Profile_Bool_Exp>;
};


export type Query_RootRoleArgs = {
  id: Scalars['Int'];
};


export type Query_RootRolesArgs = {
  distinct_on?: Maybe<Array<Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Role_Order_By>>;
  where?: Maybe<Role_Bool_Exp>;
};


export type Query_RootRolesAggregateArgs = {
  distinct_on?: Maybe<Array<Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Role_Order_By>>;
  where?: Maybe<Role_Bool_Exp>;
};


export type Query_RootTagArgs = {
  id: Scalars['Int'];
};


export type Query_RootTagsArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


export type Query_RootTagsAggregateArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


export type Query_RootTopicArgs = {
  id: Scalars['Int'];
};


export type Query_RootTopicsArgs = {
  distinct_on?: Maybe<Array<Topic_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Topic_Order_By>>;
  where?: Maybe<Topic_Bool_Exp>;
};


export type Query_RootTopicsAggregateArgs = {
  distinct_on?: Maybe<Array<Topic_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Topic_Order_By>>;
  where?: Maybe<Topic_Bool_Exp>;
};


export type Query_RootUserArgs = {
  id: Scalars['Int'];
};


export type Query_RootUsersArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


export type Query_RootUsersAggregateArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};

/** columns and relationships of "roles" */
export type Role = {
  __typename?: 'role';
  description?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  /** An array relationship */
  users: Array<User>;
  /** An aggregate relationship */
  users_aggregate: User_Aggregate;
};


/** columns and relationships of "roles" */
export type RoleUsersArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


/** columns and relationships of "roles" */
export type RoleUsers_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};

/** aggregated selection of "roles" */
export type Role_Aggregate = {
  __typename?: 'role_aggregate';
  aggregate?: Maybe<Role_Aggregate_Fields>;
  nodes: Array<Role>;
};

/** aggregate fields of "roles" */
export type Role_Aggregate_Fields = {
  __typename?: 'role_aggregate_fields';
  avg?: Maybe<Role_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Role_Max_Fields>;
  min?: Maybe<Role_Min_Fields>;
  stddev?: Maybe<Role_Stddev_Fields>;
  stddev_pop?: Maybe<Role_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Role_Stddev_Samp_Fields>;
  sum?: Maybe<Role_Sum_Fields>;
  var_pop?: Maybe<Role_Var_Pop_Fields>;
  var_samp?: Maybe<Role_Var_Samp_Fields>;
  variance?: Maybe<Role_Variance_Fields>;
};


/** aggregate fields of "roles" */
export type Role_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Role_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Role_Avg_Fields = {
  __typename?: 'role_avg_fields';
  id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "roles". All fields are combined with a logical 'AND'. */
export type Role_Bool_Exp = {
  _and?: Maybe<Array<Role_Bool_Exp>>;
  _not?: Maybe<Role_Bool_Exp>;
  _or?: Maybe<Array<Role_Bool_Exp>>;
  description?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  users?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "roles" */
export enum Role_Constraint {
  /** unique or primary key constraint */
  RolesNameKey = 'roles_name_key',
  /** unique or primary key constraint */
  RolesShortnameKey = 'roles_shortname_key',
  /** unique or primary key constraint */
  UserTypesPkey = 'user_types_pkey'
}

/** input type for incrementing numeric columns in table "roles" */
export type Role_Inc_Input = {
  id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "roles" */
export type Role_Insert_Input = {
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  users?: Maybe<User_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Role_Max_Fields = {
  __typename?: 'role_max_fields';
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Role_Min_Fields = {
  __typename?: 'role_min_fields';
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "roles" */
export type Role_Mutation_Response = {
  __typename?: 'role_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Role>;
};

/** input type for inserting object relation for remote table "roles" */
export type Role_Obj_Rel_Insert_Input = {
  data: Role_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<Role_On_Conflict>;
};

/** on conflict condition type for table "roles" */
export type Role_On_Conflict = {
  constraint: Role_Constraint;
  update_columns?: Array<Role_Update_Column>;
  where?: Maybe<Role_Bool_Exp>;
};

/** Ordering options when selecting data from "roles". */
export type Role_Order_By = {
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  users_aggregate?: Maybe<User_Aggregate_Order_By>;
};

/** primary key columns input for table: role */
export type Role_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "roles" */
export enum Role_Select_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  Type = 'type'
}

/** input type for updating data in table "roles" */
export type Role_Set_Input = {
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Role_Stddev_Fields = {
  __typename?: 'role_stddev_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Role_Stddev_Pop_Fields = {
  __typename?: 'role_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Role_Stddev_Samp_Fields = {
  __typename?: 'role_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate sum on columns */
export type Role_Sum_Fields = {
  __typename?: 'role_sum_fields';
  id?: Maybe<Scalars['Int']>;
};

/** update columns of table "roles" */
export enum Role_Update_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  Type = 'type'
}

/** aggregate var_pop on columns */
export type Role_Var_Pop_Fields = {
  __typename?: 'role_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Role_Var_Samp_Fields = {
  __typename?: 'role_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Role_Variance_Fields = {
  __typename?: 'role_variance_fields';
  id?: Maybe<Scalars['Float']>;
};

export type Subscription_Root = {
  __typename?: 'subscription_root';
  /** fetch data from the table: "activity_logins" using primary key columns */
  activityLogin?: Maybe<ActivityLogin>;
  /** fetch data from the table: "activity_logins" */
  activityLogins: Array<ActivityLogin>;
  /** fetch aggregated fields from the table: "activity_logins" */
  activityLoginsAggregate: ActivityLogin_Aggregate;
  /** fetch data from the table: "courses" using primary key columns */
  course?: Maybe<Course>;
  /** An array relationship */
  courses: Array<Course>;
  /** fetch aggregated fields from the table: "courses" */
  coursesAggregate: Course_Aggregate;
  /** fetch data from the table: "pages" using primary key columns */
  page?: Maybe<Page>;
  /** An array relationship */
  pages: Array<Page>;
  /** fetch aggregated fields from the table: "pages" */
  pagesAggregate: Page_Aggregate;
  /** fetch data from the table: "posts" using primary key columns */
  post?: Maybe<Post>;
  /** An array relationship */
  posts: Array<Post>;
  /** fetch aggregated fields from the table: "posts" */
  postsAggregate: Post_Aggregate;
  /** fetch data from the table: "profiles" using primary key columns */
  profile?: Maybe<Profile>;
  /** fetch data from the table: "profiles" */
  profiles: Array<Profile>;
  /** fetch aggregated fields from the table: "profiles" */
  profilesAggregate: Profile_Aggregate;
  /** fetch data from the table: "roles" using primary key columns */
  role?: Maybe<Role>;
  /** fetch data from the table: "roles" */
  roles: Array<Role>;
  /** fetch aggregated fields from the table: "roles" */
  rolesAggregate: Role_Aggregate;
  /** fetch data from the table: "tags" using primary key columns */
  tag?: Maybe<Tag>;
  /** fetch data from the table: "tags" */
  tags: Array<Tag>;
  /** fetch aggregated fields from the table: "tags" */
  tagsAggregate: Tag_Aggregate;
  /** fetch data from the table: "topics" using primary key columns */
  topic?: Maybe<Topic>;
  /** An array relationship */
  topics: Array<Topic>;
  /** fetch aggregated fields from the table: "topics" */
  topicsAggregate: Topic_Aggregate;
  /** fetch data from the table: "users" using primary key columns */
  user?: Maybe<User>;
  /** An array relationship */
  users: Array<User>;
  /** fetch aggregated fields from the table: "users" */
  usersAggregate: User_Aggregate;
};


export type Subscription_RootActivityLoginArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootActivityLoginsArgs = {
  distinct_on?: Maybe<Array<ActivityLogin_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ActivityLogin_Order_By>>;
  where?: Maybe<ActivityLogin_Bool_Exp>;
};


export type Subscription_RootActivityLoginsAggregateArgs = {
  distinct_on?: Maybe<Array<ActivityLogin_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ActivityLogin_Order_By>>;
  where?: Maybe<ActivityLogin_Bool_Exp>;
};


export type Subscription_RootCourseArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootCoursesArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


export type Subscription_RootCoursesAggregateArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


export type Subscription_RootPageArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootPagesArgs = {
  distinct_on?: Maybe<Array<Page_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Page_Order_By>>;
  where?: Maybe<Page_Bool_Exp>;
};


export type Subscription_RootPagesAggregateArgs = {
  distinct_on?: Maybe<Array<Page_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Page_Order_By>>;
  where?: Maybe<Page_Bool_Exp>;
};


export type Subscription_RootPostArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootPostsArgs = {
  distinct_on?: Maybe<Array<Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Post_Order_By>>;
  where?: Maybe<Post_Bool_Exp>;
};


export type Subscription_RootPostsAggregateArgs = {
  distinct_on?: Maybe<Array<Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Post_Order_By>>;
  where?: Maybe<Post_Bool_Exp>;
};


export type Subscription_RootProfileArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootProfilesArgs = {
  distinct_on?: Maybe<Array<Profile_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Profile_Order_By>>;
  where?: Maybe<Profile_Bool_Exp>;
};


export type Subscription_RootProfilesAggregateArgs = {
  distinct_on?: Maybe<Array<Profile_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Profile_Order_By>>;
  where?: Maybe<Profile_Bool_Exp>;
};


export type Subscription_RootRoleArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootRolesArgs = {
  distinct_on?: Maybe<Array<Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Role_Order_By>>;
  where?: Maybe<Role_Bool_Exp>;
};


export type Subscription_RootRolesAggregateArgs = {
  distinct_on?: Maybe<Array<Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Role_Order_By>>;
  where?: Maybe<Role_Bool_Exp>;
};


export type Subscription_RootTagArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootTagsArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


export type Subscription_RootTagsAggregateArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


export type Subscription_RootTopicArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootTopicsArgs = {
  distinct_on?: Maybe<Array<Topic_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Topic_Order_By>>;
  where?: Maybe<Topic_Bool_Exp>;
};


export type Subscription_RootTopicsAggregateArgs = {
  distinct_on?: Maybe<Array<Topic_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Topic_Order_By>>;
  where?: Maybe<Topic_Bool_Exp>;
};


export type Subscription_RootUserArgs = {
  id: Scalars['Int'];
};


export type Subscription_RootUsersArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


export type Subscription_RootUsersAggregateArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};

/** columns and relationships of "tags" */
export type Tag = {
  __typename?: 'tag';
  createdAt: Scalars['timestamptz'];
  createdById: Scalars['Int'];
  id: Scalars['Int'];
  slug: Scalars['String'];
  title: Scalars['String'];
  updatedAt: Scalars['timestamptz'];
  updatedById: Scalars['Int'];
  /** An object relationship */
  user: User;
  /** An object relationship */
  userByUpdatedById: User;
};

/** aggregated selection of "tags" */
export type Tag_Aggregate = {
  __typename?: 'tag_aggregate';
  aggregate?: Maybe<Tag_Aggregate_Fields>;
  nodes: Array<Tag>;
};

/** aggregate fields of "tags" */
export type Tag_Aggregate_Fields = {
  __typename?: 'tag_aggregate_fields';
  avg?: Maybe<Tag_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Tag_Max_Fields>;
  min?: Maybe<Tag_Min_Fields>;
  stddev?: Maybe<Tag_Stddev_Fields>;
  stddev_pop?: Maybe<Tag_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Tag_Stddev_Samp_Fields>;
  sum?: Maybe<Tag_Sum_Fields>;
  var_pop?: Maybe<Tag_Var_Pop_Fields>;
  var_samp?: Maybe<Tag_Var_Samp_Fields>;
  variance?: Maybe<Tag_Variance_Fields>;
};


/** aggregate fields of "tags" */
export type Tag_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Tag_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "tags" */
export type Tag_Aggregate_Order_By = {
  avg?: Maybe<Tag_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Tag_Max_Order_By>;
  min?: Maybe<Tag_Min_Order_By>;
  stddev?: Maybe<Tag_Stddev_Order_By>;
  stddev_pop?: Maybe<Tag_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Tag_Stddev_Samp_Order_By>;
  sum?: Maybe<Tag_Sum_Order_By>;
  var_pop?: Maybe<Tag_Var_Pop_Order_By>;
  var_samp?: Maybe<Tag_Var_Samp_Order_By>;
  variance?: Maybe<Tag_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "tags" */
export type Tag_Arr_Rel_Insert_Input = {
  data: Array<Tag_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Tag_On_Conflict>;
};

/** aggregate avg on columns */
export type Tag_Avg_Fields = {
  __typename?: 'tag_avg_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "tags" */
export type Tag_Avg_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "tags". All fields are combined with a logical 'AND'. */
export type Tag_Bool_Exp = {
  _and?: Maybe<Array<Tag_Bool_Exp>>;
  _not?: Maybe<Tag_Bool_Exp>;
  _or?: Maybe<Array<Tag_Bool_Exp>>;
  createdAt?: Maybe<Timestamptz_Comparison_Exp>;
  createdById?: Maybe<Int_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  slug?: Maybe<String_Comparison_Exp>;
  title?: Maybe<String_Comparison_Exp>;
  updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
  updatedById?: Maybe<Int_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  userByUpdatedById?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "tags" */
export enum Tag_Constraint {
  /** unique or primary key constraint */
  TagsPkey = 'tags_pkey',
  /** unique or primary key constraint */
  TagsSlugKey = 'tags_slug_key',
  /** unique or primary key constraint */
  TagsTitleKey = 'tags_title_key'
}

/** input type for incrementing numeric columns in table "tags" */
export type Tag_Inc_Input = {
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "tags" */
export type Tag_Insert_Input = {
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  userByUpdatedById?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Tag_Max_Fields = {
  __typename?: 'tag_max_fields';
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "tags" */
export type Tag_Max_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Tag_Min_Fields = {
  __typename?: 'tag_min_fields';
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "tags" */
export type Tag_Min_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** response of any mutation on the table "tags" */
export type Tag_Mutation_Response = {
  __typename?: 'tag_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Tag>;
};

/** on conflict condition type for table "tags" */
export type Tag_On_Conflict = {
  constraint: Tag_Constraint;
  update_columns?: Array<Tag_Update_Column>;
  where?: Maybe<Tag_Bool_Exp>;
};

/** Ordering options when selecting data from "tags". */
export type Tag_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  userByUpdatedById?: Maybe<User_Order_By>;
};

/** primary key columns input for table: tag */
export type Tag_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "tags" */
export enum Tag_Select_Column {
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedById = 'createdById',
  /** column name */
  Id = 'id',
  /** column name */
  Slug = 'slug',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedById = 'updatedById'
}

/** input type for updating data in table "tags" */
export type Tag_Set_Input = {
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Tag_Stddev_Fields = {
  __typename?: 'tag_stddev_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "tags" */
export type Tag_Stddev_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Tag_Stddev_Pop_Fields = {
  __typename?: 'tag_stddev_pop_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "tags" */
export type Tag_Stddev_Pop_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Tag_Stddev_Samp_Fields = {
  __typename?: 'tag_stddev_samp_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "tags" */
export type Tag_Stddev_Samp_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Tag_Sum_Fields = {
  __typename?: 'tag_sum_fields';
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "tags" */
export type Tag_Sum_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** update columns of table "tags" */
export enum Tag_Update_Column {
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedById = 'createdById',
  /** column name */
  Id = 'id',
  /** column name */
  Slug = 'slug',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedById = 'updatedById'
}

/** aggregate var_pop on columns */
export type Tag_Var_Pop_Fields = {
  __typename?: 'tag_var_pop_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "tags" */
export type Tag_Var_Pop_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Tag_Var_Samp_Fields = {
  __typename?: 'tag_var_samp_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "tags" */
export type Tag_Var_Samp_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Tag_Variance_Fields = {
  __typename?: 'tag_variance_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "tags" */
export type Tag_Variance_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
export type Timestamptz_Comparison_Exp = {
  _eq?: Maybe<Scalars['timestamptz']>;
  _gt?: Maybe<Scalars['timestamptz']>;
  _gte?: Maybe<Scalars['timestamptz']>;
  _in?: Maybe<Array<Scalars['timestamptz']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['timestamptz']>;
  _lte?: Maybe<Scalars['timestamptz']>;
  _neq?: Maybe<Scalars['timestamptz']>;
  _nin?: Maybe<Array<Scalars['timestamptz']>>;
};

/** columns and relationships of "topics" */
export type Topic = {
  __typename?: 'topic';
  createdAt: Scalars['timestamptz'];
  createdById: Scalars['Int'];
  id: Scalars['Int'];
  parentTopicIds?: Maybe<Scalars['json']>;
  slug: Scalars['String'];
  title: Scalars['String'];
  updatedAt: Scalars['timestamptz'];
  updatedById: Scalars['Int'];
  /** An object relationship */
  user: User;
  /** An object relationship */
  userByUpdatedById: User;
};


/** columns and relationships of "topics" */
export type TopicParentTopicIdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "topics" */
export type Topic_Aggregate = {
  __typename?: 'topic_aggregate';
  aggregate?: Maybe<Topic_Aggregate_Fields>;
  nodes: Array<Topic>;
};

/** aggregate fields of "topics" */
export type Topic_Aggregate_Fields = {
  __typename?: 'topic_aggregate_fields';
  avg?: Maybe<Topic_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Topic_Max_Fields>;
  min?: Maybe<Topic_Min_Fields>;
  stddev?: Maybe<Topic_Stddev_Fields>;
  stddev_pop?: Maybe<Topic_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Topic_Stddev_Samp_Fields>;
  sum?: Maybe<Topic_Sum_Fields>;
  var_pop?: Maybe<Topic_Var_Pop_Fields>;
  var_samp?: Maybe<Topic_Var_Samp_Fields>;
  variance?: Maybe<Topic_Variance_Fields>;
};


/** aggregate fields of "topics" */
export type Topic_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Topic_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "topics" */
export type Topic_Aggregate_Order_By = {
  avg?: Maybe<Topic_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Topic_Max_Order_By>;
  min?: Maybe<Topic_Min_Order_By>;
  stddev?: Maybe<Topic_Stddev_Order_By>;
  stddev_pop?: Maybe<Topic_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Topic_Stddev_Samp_Order_By>;
  sum?: Maybe<Topic_Sum_Order_By>;
  var_pop?: Maybe<Topic_Var_Pop_Order_By>;
  var_samp?: Maybe<Topic_Var_Samp_Order_By>;
  variance?: Maybe<Topic_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "topics" */
export type Topic_Arr_Rel_Insert_Input = {
  data: Array<Topic_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<Topic_On_Conflict>;
};

/** aggregate avg on columns */
export type Topic_Avg_Fields = {
  __typename?: 'topic_avg_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "topics" */
export type Topic_Avg_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "topics". All fields are combined with a logical 'AND'. */
export type Topic_Bool_Exp = {
  _and?: Maybe<Array<Topic_Bool_Exp>>;
  _not?: Maybe<Topic_Bool_Exp>;
  _or?: Maybe<Array<Topic_Bool_Exp>>;
  createdAt?: Maybe<Timestamptz_Comparison_Exp>;
  createdById?: Maybe<Int_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  parentTopicIds?: Maybe<Json_Comparison_Exp>;
  slug?: Maybe<String_Comparison_Exp>;
  title?: Maybe<String_Comparison_Exp>;
  updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
  updatedById?: Maybe<Int_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  userByUpdatedById?: Maybe<User_Bool_Exp>;
};

/** unique or primary key constraints on table "topics" */
export enum Topic_Constraint {
  /** unique or primary key constraint */
  TopicsPkey = 'topics_pkey',
  /** unique or primary key constraint */
  TopicsSlugKey = 'topics_slug_key',
  /** unique or primary key constraint */
  TopicsTitleKey = 'topics_title_key'
}

/** input type for incrementing numeric columns in table "topics" */
export type Topic_Inc_Input = {
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "topics" */
export type Topic_Insert_Input = {
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  parentTopicIds?: Maybe<Scalars['json']>;
  slug?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  userByUpdatedById?: Maybe<User_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Topic_Max_Fields = {
  __typename?: 'topic_max_fields';
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by max() on columns of table "topics" */
export type Topic_Max_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Topic_Min_Fields = {
  __typename?: 'topic_min_fields';
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by min() on columns of table "topics" */
export type Topic_Min_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** response of any mutation on the table "topics" */
export type Topic_Mutation_Response = {
  __typename?: 'topic_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Topic>;
};

/** on conflict condition type for table "topics" */
export type Topic_On_Conflict = {
  constraint: Topic_Constraint;
  update_columns?: Array<Topic_Update_Column>;
  where?: Maybe<Topic_Bool_Exp>;
};

/** Ordering options when selecting data from "topics". */
export type Topic_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  parentTopicIds?: Maybe<Order_By>;
  slug?: Maybe<Order_By>;
  title?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  userByUpdatedById?: Maybe<User_Order_By>;
};

/** primary key columns input for table: topic */
export type Topic_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "topics" */
export enum Topic_Select_Column {
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedById = 'createdById',
  /** column name */
  Id = 'id',
  /** column name */
  ParentTopicIds = 'parentTopicIds',
  /** column name */
  Slug = 'slug',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedById = 'updatedById'
}

/** input type for updating data in table "topics" */
export type Topic_Set_Input = {
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  parentTopicIds?: Maybe<Scalars['json']>;
  slug?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Topic_Stddev_Fields = {
  __typename?: 'topic_stddev_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "topics" */
export type Topic_Stddev_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Topic_Stddev_Pop_Fields = {
  __typename?: 'topic_stddev_pop_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "topics" */
export type Topic_Stddev_Pop_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Topic_Stddev_Samp_Fields = {
  __typename?: 'topic_stddev_samp_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "topics" */
export type Topic_Stddev_Samp_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type Topic_Sum_Fields = {
  __typename?: 'topic_sum_fields';
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "topics" */
export type Topic_Sum_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** update columns of table "topics" */
export enum Topic_Update_Column {
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedById = 'createdById',
  /** column name */
  Id = 'id',
  /** column name */
  ParentTopicIds = 'parentTopicIds',
  /** column name */
  Slug = 'slug',
  /** column name */
  Title = 'title',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedById = 'updatedById'
}

/** aggregate var_pop on columns */
export type Topic_Var_Pop_Fields = {
  __typename?: 'topic_var_pop_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "topics" */
export type Topic_Var_Pop_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Topic_Var_Samp_Fields = {
  __typename?: 'topic_var_samp_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "topics" */
export type Topic_Var_Samp_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Topic_Variance_Fields = {
  __typename?: 'topic_variance_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "topics" */
export type Topic_Variance_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** columns and relationships of "users" */
export type User = {
  __typename?: 'user';
  /** An array relationship */
  courses: Array<Course>;
  /** An array relationship */
  coursesByUpdatedById: Array<Course>;
  /** An aggregate relationship */
  coursesByUpdatedById_aggregate: Course_Aggregate;
  /** An aggregate relationship */
  courses_aggregate: Course_Aggregate;
  createdAt: Scalars['timestamptz'];
  createdById?: Maybe<Scalars['Int']>;
  emailAddress?: Maybe<Scalars['String']>;
  firstName: Scalars['String'];
  fullName?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  lastActive?: Maybe<Scalars['timestamptz']>;
  lastName: Scalars['String'];
  /** An array relationship */
  logins: Array<ActivityLogin>;
  /** An aggregate relationship */
  logins_aggregate: ActivityLogin_Aggregate;
  /** An array relationship */
  pages: Array<Page>;
  /** An array relationship */
  pagesByCreatedById: Array<Page>;
  /** An aggregate relationship */
  pagesByCreatedById_aggregate: Page_Aggregate;
  /** An aggregate relationship */
  pages_aggregate: Page_Aggregate;
  /** An array relationship */
  posts: Array<Post>;
  /** An array relationship */
  postsByUpdatedById: Array<Post>;
  /** An aggregate relationship */
  postsByUpdatedById_aggregate: Post_Aggregate;
  /** An aggregate relationship */
  posts_aggregate: Post_Aggregate;
  /** An object relationship */
  profile?: Maybe<Profile>;
  pronouns?: Maybe<Scalars['String']>;
  /** An object relationship */
  role: Role;
  roleId: Scalars['Int'];
  status: Scalars['String'];
  /** fetch data from the table: "tags" */
  tags: Array<Tag>;
  /** An array relationship */
  tagsByUpdatedById: Array<Tag>;
  /** An aggregate relationship */
  tagsByUpdatedById_aggregate: Tag_Aggregate;
  /** An aggregate relationship */
  tags_aggregate: Tag_Aggregate;
  /** An array relationship */
  topics: Array<Topic>;
  /** An array relationship */
  topicsByUpdatedById: Array<Topic>;
  /** An aggregate relationship */
  topicsByUpdatedById_aggregate: Topic_Aggregate;
  /** An aggregate relationship */
  topics_aggregate: Topic_Aggregate;
  updatedAt: Scalars['timestamptz'];
  updatedById?: Maybe<Scalars['Int']>;
  /** An object relationship */
  user?: Maybe<User>;
  /** An object relationship */
  userByUpdatedById?: Maybe<User>;
  username?: Maybe<Scalars['String']>;
  /** An array relationship */
  users: Array<User>;
  /** An array relationship */
  usersByUpdatedById: Array<User>;
  /** An aggregate relationship */
  usersByUpdatedById_aggregate: User_Aggregate;
  /** An aggregate relationship */
  users_aggregate: User_Aggregate;
  verified: Scalars['Boolean'];
};


/** columns and relationships of "users" */
export type UserCoursesArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserCoursesByUpdatedByIdArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserCoursesByUpdatedById_AggregateArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserCourses_AggregateArgs = {
  distinct_on?: Maybe<Array<Course_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Course_Order_By>>;
  where?: Maybe<Course_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserLoginsArgs = {
  distinct_on?: Maybe<Array<ActivityLogin_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ActivityLogin_Order_By>>;
  where?: Maybe<ActivityLogin_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserLogins_AggregateArgs = {
  distinct_on?: Maybe<Array<ActivityLogin_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<ActivityLogin_Order_By>>;
  where?: Maybe<ActivityLogin_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserPagesArgs = {
  distinct_on?: Maybe<Array<Page_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Page_Order_By>>;
  where?: Maybe<Page_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserPagesByCreatedByIdArgs = {
  distinct_on?: Maybe<Array<Page_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Page_Order_By>>;
  where?: Maybe<Page_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserPagesByCreatedById_AggregateArgs = {
  distinct_on?: Maybe<Array<Page_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Page_Order_By>>;
  where?: Maybe<Page_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserPages_AggregateArgs = {
  distinct_on?: Maybe<Array<Page_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Page_Order_By>>;
  where?: Maybe<Page_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserPostsArgs = {
  distinct_on?: Maybe<Array<Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Post_Order_By>>;
  where?: Maybe<Post_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserPostsByUpdatedByIdArgs = {
  distinct_on?: Maybe<Array<Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Post_Order_By>>;
  where?: Maybe<Post_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserPostsByUpdatedById_AggregateArgs = {
  distinct_on?: Maybe<Array<Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Post_Order_By>>;
  where?: Maybe<Post_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserPosts_AggregateArgs = {
  distinct_on?: Maybe<Array<Post_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Post_Order_By>>;
  where?: Maybe<Post_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserTagsArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserTagsByUpdatedByIdArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserTagsByUpdatedById_AggregateArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserTags_AggregateArgs = {
  distinct_on?: Maybe<Array<Tag_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tag_Order_By>>;
  where?: Maybe<Tag_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserTopicsArgs = {
  distinct_on?: Maybe<Array<Topic_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Topic_Order_By>>;
  where?: Maybe<Topic_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserTopicsByUpdatedByIdArgs = {
  distinct_on?: Maybe<Array<Topic_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Topic_Order_By>>;
  where?: Maybe<Topic_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserTopicsByUpdatedById_AggregateArgs = {
  distinct_on?: Maybe<Array<Topic_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Topic_Order_By>>;
  where?: Maybe<Topic_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserTopics_AggregateArgs = {
  distinct_on?: Maybe<Array<Topic_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Topic_Order_By>>;
  where?: Maybe<Topic_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserUsersArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserUsersByUpdatedByIdArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserUsersByUpdatedById_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UserUsers_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Order_By>>;
  where?: Maybe<User_Bool_Exp>;
};

/** aggregated selection of "users" */
export type User_Aggregate = {
  __typename?: 'user_aggregate';
  aggregate?: Maybe<User_Aggregate_Fields>;
  nodes: Array<User>;
};

/** aggregate fields of "users" */
export type User_Aggregate_Fields = {
  __typename?: 'user_aggregate_fields';
  avg?: Maybe<User_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<User_Max_Fields>;
  min?: Maybe<User_Min_Fields>;
  stddev?: Maybe<User_Stddev_Fields>;
  stddev_pop?: Maybe<User_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<User_Stddev_Samp_Fields>;
  sum?: Maybe<User_Sum_Fields>;
  var_pop?: Maybe<User_Var_Pop_Fields>;
  var_samp?: Maybe<User_Var_Samp_Fields>;
  variance?: Maybe<User_Variance_Fields>;
};


/** aggregate fields of "users" */
export type User_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<User_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "users" */
export type User_Aggregate_Order_By = {
  avg?: Maybe<User_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<User_Max_Order_By>;
  min?: Maybe<User_Min_Order_By>;
  stddev?: Maybe<User_Stddev_Order_By>;
  stddev_pop?: Maybe<User_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<User_Stddev_Samp_Order_By>;
  sum?: Maybe<User_Sum_Order_By>;
  var_pop?: Maybe<User_Var_Pop_Order_By>;
  var_samp?: Maybe<User_Var_Samp_Order_By>;
  variance?: Maybe<User_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "users" */
export type User_Arr_Rel_Insert_Input = {
  data: Array<User_Insert_Input>;
  /** on conflict condition */
  on_conflict?: Maybe<User_On_Conflict>;
};

/** aggregate avg on columns */
export type User_Avg_Fields = {
  __typename?: 'user_avg_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roleId?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "users" */
export type User_Avg_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roleId?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'. */
export type User_Bool_Exp = {
  _and?: Maybe<Array<User_Bool_Exp>>;
  _not?: Maybe<User_Bool_Exp>;
  _or?: Maybe<Array<User_Bool_Exp>>;
  courses?: Maybe<Course_Bool_Exp>;
  coursesByUpdatedById?: Maybe<Course_Bool_Exp>;
  createdAt?: Maybe<Timestamptz_Comparison_Exp>;
  createdById?: Maybe<Int_Comparison_Exp>;
  emailAddress?: Maybe<String_Comparison_Exp>;
  firstName?: Maybe<String_Comparison_Exp>;
  fullName?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  lastActive?: Maybe<Timestamptz_Comparison_Exp>;
  lastName?: Maybe<String_Comparison_Exp>;
  logins?: Maybe<ActivityLogin_Bool_Exp>;
  pages?: Maybe<Page_Bool_Exp>;
  pagesByCreatedById?: Maybe<Page_Bool_Exp>;
  posts?: Maybe<Post_Bool_Exp>;
  postsByUpdatedById?: Maybe<Post_Bool_Exp>;
  profile?: Maybe<Profile_Bool_Exp>;
  pronouns?: Maybe<String_Comparison_Exp>;
  role?: Maybe<Role_Bool_Exp>;
  roleId?: Maybe<Int_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
  tags?: Maybe<Tag_Bool_Exp>;
  tagsByUpdatedById?: Maybe<Tag_Bool_Exp>;
  topics?: Maybe<Topic_Bool_Exp>;
  topicsByUpdatedById?: Maybe<Topic_Bool_Exp>;
  updatedAt?: Maybe<Timestamptz_Comparison_Exp>;
  updatedById?: Maybe<Int_Comparison_Exp>;
  user?: Maybe<User_Bool_Exp>;
  userByUpdatedById?: Maybe<User_Bool_Exp>;
  username?: Maybe<String_Comparison_Exp>;
  users?: Maybe<User_Bool_Exp>;
  usersByUpdatedById?: Maybe<User_Bool_Exp>;
  verified?: Maybe<Boolean_Comparison_Exp>;
};

/** unique or primary key constraints on table "users" */
export enum User_Constraint {
  /** unique or primary key constraint */
  UsersEmailKey = 'users_email_key',
  /** unique or primary key constraint */
  UsersPkey = 'users_pkey',
  /** unique or primary key constraint */
  UsersUsernameKey = 'users_username_key'
}

/** input type for incrementing numeric columns in table "users" */
export type User_Inc_Input = {
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  roleId?: Maybe<Scalars['Int']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "users" */
export type User_Insert_Input = {
  courses?: Maybe<Course_Arr_Rel_Insert_Input>;
  coursesByUpdatedById?: Maybe<Course_Arr_Rel_Insert_Input>;
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  emailAddress?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  lastActive?: Maybe<Scalars['timestamptz']>;
  lastName?: Maybe<Scalars['String']>;
  logins?: Maybe<ActivityLogin_Arr_Rel_Insert_Input>;
  pages?: Maybe<Page_Arr_Rel_Insert_Input>;
  pagesByCreatedById?: Maybe<Page_Arr_Rel_Insert_Input>;
  posts?: Maybe<Post_Arr_Rel_Insert_Input>;
  postsByUpdatedById?: Maybe<Post_Arr_Rel_Insert_Input>;
  profile?: Maybe<Profile_Obj_Rel_Insert_Input>;
  pronouns?: Maybe<Scalars['String']>;
  role?: Maybe<Role_Obj_Rel_Insert_Input>;
  roleId?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  tags?: Maybe<Tag_Arr_Rel_Insert_Input>;
  tagsByUpdatedById?: Maybe<Tag_Arr_Rel_Insert_Input>;
  topics?: Maybe<Topic_Arr_Rel_Insert_Input>;
  topicsByUpdatedById?: Maybe<Topic_Arr_Rel_Insert_Input>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
  user?: Maybe<User_Obj_Rel_Insert_Input>;
  userByUpdatedById?: Maybe<User_Obj_Rel_Insert_Input>;
  username?: Maybe<Scalars['String']>;
  users?: Maybe<User_Arr_Rel_Insert_Input>;
  usersByUpdatedById?: Maybe<User_Arr_Rel_Insert_Input>;
  verified?: Maybe<Scalars['Boolean']>;
};

/** aggregate max on columns */
export type User_Max_Fields = {
  __typename?: 'user_max_fields';
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  emailAddress?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  lastActive?: Maybe<Scalars['timestamptz']>;
  lastName?: Maybe<Scalars['String']>;
  pronouns?: Maybe<Scalars['String']>;
  roleId?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
  username?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "users" */
export type User_Max_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  emailAddress?: Maybe<Order_By>;
  firstName?: Maybe<Order_By>;
  fullName?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lastActive?: Maybe<Order_By>;
  lastName?: Maybe<Order_By>;
  pronouns?: Maybe<Order_By>;
  roleId?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
  username?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type User_Min_Fields = {
  __typename?: 'user_min_fields';
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  emailAddress?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  lastActive?: Maybe<Scalars['timestamptz']>;
  lastName?: Maybe<Scalars['String']>;
  pronouns?: Maybe<Scalars['String']>;
  roleId?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
  username?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "users" */
export type User_Min_Order_By = {
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  emailAddress?: Maybe<Order_By>;
  firstName?: Maybe<Order_By>;
  fullName?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lastActive?: Maybe<Order_By>;
  lastName?: Maybe<Order_By>;
  pronouns?: Maybe<Order_By>;
  roleId?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
  username?: Maybe<Order_By>;
};

/** response of any mutation on the table "users" */
export type User_Mutation_Response = {
  __typename?: 'user_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<User>;
};

/** input type for inserting object relation for remote table "users" */
export type User_Obj_Rel_Insert_Input = {
  data: User_Insert_Input;
  /** on conflict condition */
  on_conflict?: Maybe<User_On_Conflict>;
};

/** on conflict condition type for table "users" */
export type User_On_Conflict = {
  constraint: User_Constraint;
  update_columns?: Array<User_Update_Column>;
  where?: Maybe<User_Bool_Exp>;
};

/** Ordering options when selecting data from "users". */
export type User_Order_By = {
  coursesByUpdatedById_aggregate?: Maybe<Course_Aggregate_Order_By>;
  courses_aggregate?: Maybe<Course_Aggregate_Order_By>;
  createdAt?: Maybe<Order_By>;
  createdById?: Maybe<Order_By>;
  emailAddress?: Maybe<Order_By>;
  firstName?: Maybe<Order_By>;
  fullName?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lastActive?: Maybe<Order_By>;
  lastName?: Maybe<Order_By>;
  logins_aggregate?: Maybe<ActivityLogin_Aggregate_Order_By>;
  pagesByCreatedById_aggregate?: Maybe<Page_Aggregate_Order_By>;
  pages_aggregate?: Maybe<Page_Aggregate_Order_By>;
  postsByUpdatedById_aggregate?: Maybe<Post_Aggregate_Order_By>;
  posts_aggregate?: Maybe<Post_Aggregate_Order_By>;
  profile?: Maybe<Profile_Order_By>;
  pronouns?: Maybe<Order_By>;
  role?: Maybe<Role_Order_By>;
  roleId?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  tagsByUpdatedById_aggregate?: Maybe<Tag_Aggregate_Order_By>;
  tags_aggregate?: Maybe<Tag_Aggregate_Order_By>;
  topicsByUpdatedById_aggregate?: Maybe<Topic_Aggregate_Order_By>;
  topics_aggregate?: Maybe<Topic_Aggregate_Order_By>;
  updatedAt?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
  user?: Maybe<User_Order_By>;
  userByUpdatedById?: Maybe<User_Order_By>;
  username?: Maybe<Order_By>;
  usersByUpdatedById_aggregate?: Maybe<User_Aggregate_Order_By>;
  users_aggregate?: Maybe<User_Aggregate_Order_By>;
  verified?: Maybe<Order_By>;
};

/** primary key columns input for table: user */
export type User_Pk_Columns_Input = {
  id: Scalars['Int'];
};

/** select columns of table "users" */
export enum User_Select_Column {
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedById = 'createdById',
  /** column name */
  EmailAddress = 'emailAddress',
  /** column name */
  FirstName = 'firstName',
  /** column name */
  FullName = 'fullName',
  /** column name */
  Id = 'id',
  /** column name */
  LastActive = 'lastActive',
  /** column name */
  LastName = 'lastName',
  /** column name */
  Pronouns = 'pronouns',
  /** column name */
  RoleId = 'roleId',
  /** column name */
  Status = 'status',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedById = 'updatedById',
  /** column name */
  Username = 'username',
  /** column name */
  Verified = 'verified'
}

/** input type for updating data in table "users" */
export type User_Set_Input = {
  createdAt?: Maybe<Scalars['timestamptz']>;
  createdById?: Maybe<Scalars['Int']>;
  emailAddress?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  lastActive?: Maybe<Scalars['timestamptz']>;
  lastName?: Maybe<Scalars['String']>;
  pronouns?: Maybe<Scalars['String']>;
  roleId?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['timestamptz']>;
  updatedById?: Maybe<Scalars['Int']>;
  username?: Maybe<Scalars['String']>;
  verified?: Maybe<Scalars['Boolean']>;
};

/** aggregate stddev on columns */
export type User_Stddev_Fields = {
  __typename?: 'user_stddev_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roleId?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "users" */
export type User_Stddev_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roleId?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type User_Stddev_Pop_Fields = {
  __typename?: 'user_stddev_pop_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roleId?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "users" */
export type User_Stddev_Pop_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roleId?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type User_Stddev_Samp_Fields = {
  __typename?: 'user_stddev_samp_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roleId?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "users" */
export type User_Stddev_Samp_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roleId?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate sum on columns */
export type User_Sum_Fields = {
  __typename?: 'user_sum_fields';
  createdById?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  roleId?: Maybe<Scalars['Int']>;
  updatedById?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "users" */
export type User_Sum_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roleId?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** update columns of table "users" */
export enum User_Update_Column {
  /** column name */
  CreatedAt = 'createdAt',
  /** column name */
  CreatedById = 'createdById',
  /** column name */
  EmailAddress = 'emailAddress',
  /** column name */
  FirstName = 'firstName',
  /** column name */
  FullName = 'fullName',
  /** column name */
  Id = 'id',
  /** column name */
  LastActive = 'lastActive',
  /** column name */
  LastName = 'lastName',
  /** column name */
  Pronouns = 'pronouns',
  /** column name */
  RoleId = 'roleId',
  /** column name */
  Status = 'status',
  /** column name */
  UpdatedAt = 'updatedAt',
  /** column name */
  UpdatedById = 'updatedById',
  /** column name */
  Username = 'username',
  /** column name */
  Verified = 'verified'
}

/** aggregate var_pop on columns */
export type User_Var_Pop_Fields = {
  __typename?: 'user_var_pop_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roleId?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "users" */
export type User_Var_Pop_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roleId?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type User_Var_Samp_Fields = {
  __typename?: 'user_var_samp_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roleId?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "users" */
export type User_Var_Samp_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roleId?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type User_Variance_Fields = {
  __typename?: 'user_variance_fields';
  createdById?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  roleId?: Maybe<Scalars['Float']>;
  updatedById?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "users" */
export type User_Variance_Order_By = {
  createdById?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  roleId?: Maybe<Order_By>;
  updatedById?: Maybe<Order_By>;
};
