/* eslint-disable */
// @generated by graphql-codegen
// This file was automatically generated and should not be edited.
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  timestamptz: any;
  uuid: any;
};

/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
export type Int_Comparison_Exp = {
  _eq?: InputMaybe<Scalars["Int"]>;
  _gt?: InputMaybe<Scalars["Int"]>;
  _gte?: InputMaybe<Scalars["Int"]>;
  _in?: InputMaybe<Array<Scalars["Int"]>>;
  _is_null?: InputMaybe<Scalars["Boolean"]>;
  _lt?: InputMaybe<Scalars["Int"]>;
  _lte?: InputMaybe<Scalars["Int"]>;
  _neq?: InputMaybe<Scalars["Int"]>;
  _nin?: InputMaybe<Array<Scalars["Int"]>>;
};

/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
export type String_Comparison_Exp = {
  _eq?: InputMaybe<Scalars["String"]>;
  _gt?: InputMaybe<Scalars["String"]>;
  _gte?: InputMaybe<Scalars["String"]>;
  /** does the column match the given case-insensitive pattern */
  _ilike?: InputMaybe<Scalars["String"]>;
  _in?: InputMaybe<Array<Scalars["String"]>>;
  /** does the column match the given POSIX regular expression, case insensitive */
  _iregex?: InputMaybe<Scalars["String"]>;
  _is_null?: InputMaybe<Scalars["Boolean"]>;
  /** does the column match the given pattern */
  _like?: InputMaybe<Scalars["String"]>;
  _lt?: InputMaybe<Scalars["String"]>;
  _lte?: InputMaybe<Scalars["String"]>;
  _neq?: InputMaybe<Scalars["String"]>;
  /** does the column NOT match the given case-insensitive pattern */
  _nilike?: InputMaybe<Scalars["String"]>;
  _nin?: InputMaybe<Array<Scalars["String"]>>;
  /** does the column NOT match the given POSIX regular expression, case insensitive */
  _niregex?: InputMaybe<Scalars["String"]>;
  /** does the column NOT match the given pattern */
  _nlike?: InputMaybe<Scalars["String"]>;
  /** does the column NOT match the given POSIX regular expression, case sensitive */
  _nregex?: InputMaybe<Scalars["String"]>;
  /** does the column NOT match the given SQL regular expression */
  _nsimilar?: InputMaybe<Scalars["String"]>;
  /** does the column match the given POSIX regular expression, case sensitive */
  _regex?: InputMaybe<Scalars["String"]>;
  /** does the column match the given SQL regular expression */
  _similar?: InputMaybe<Scalars["String"]>;
};

/** columns and relationships of "messages" */
export type Messages = {
  __typename?: "messages";
  body: Scalars["String"];
  created_at: Scalars["timestamptz"];
  created_by: Scalars["Int"];
  id: Scalars["uuid"];
  status: Scalars["String"];
  /** An object relationship */
  thread: Threads;
  thread_id: Scalars["Int"];
  updated_at: Scalars["timestamptz"];
  /** An object relationship */
  user: Users;
};

/** aggregated selection of "messages" */
export type Messages_Aggregate = {
  __typename?: "messages_aggregate";
  aggregate?: Maybe<Messages_Aggregate_Fields>;
  nodes: Array<Messages>;
};

/** aggregate fields of "messages" */
export type Messages_Aggregate_Fields = {
  __typename?: "messages_aggregate_fields";
  avg?: Maybe<Messages_Avg_Fields>;
  count: Scalars["Int"];
  max?: Maybe<Messages_Max_Fields>;
  min?: Maybe<Messages_Min_Fields>;
  stddev?: Maybe<Messages_Stddev_Fields>;
  stddev_pop?: Maybe<Messages_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Messages_Stddev_Samp_Fields>;
  sum?: Maybe<Messages_Sum_Fields>;
  var_pop?: Maybe<Messages_Var_Pop_Fields>;
  var_samp?: Maybe<Messages_Var_Samp_Fields>;
  variance?: Maybe<Messages_Variance_Fields>;
};

/** aggregate fields of "messages" */
export type Messages_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Messages_Select_Column>>;
  distinct?: InputMaybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "messages" */
export type Messages_Aggregate_Order_By = {
  avg?: InputMaybe<Messages_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Messages_Max_Order_By>;
  min?: InputMaybe<Messages_Min_Order_By>;
  stddev?: InputMaybe<Messages_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Messages_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Messages_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Messages_Sum_Order_By>;
  var_pop?: InputMaybe<Messages_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Messages_Var_Samp_Order_By>;
  variance?: InputMaybe<Messages_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "messages" */
export type Messages_Arr_Rel_Insert_Input = {
  data: Array<Messages_Insert_Input>;
  /** on conflict condition */
  on_conflict?: InputMaybe<Messages_On_Conflict>;
};

/** aggregate avg on columns */
export type Messages_Avg_Fields = {
  __typename?: "messages_avg_fields";
  created_by?: Maybe<Scalars["Float"]>;
  thread_id?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "messages" */
export type Messages_Avg_Order_By = {
  created_by?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "messages". All fields are combined with a logical 'AND'. */
export type Messages_Bool_Exp = {
  _and?: InputMaybe<Array<Messages_Bool_Exp>>;
  _not?: InputMaybe<Messages_Bool_Exp>;
  _or?: InputMaybe<Array<Messages_Bool_Exp>>;
  body?: InputMaybe<String_Comparison_Exp>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  created_by?: InputMaybe<Int_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  status?: InputMaybe<String_Comparison_Exp>;
  thread?: InputMaybe<Threads_Bool_Exp>;
  thread_id?: InputMaybe<Int_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  user?: InputMaybe<Users_Bool_Exp>;
};

/** unique or primary key constraints on table "messages" */
export enum Messages_Constraint {
  /** unique or primary key constraint */
  MessagesPkey = "messages_pkey",
}

/** input type for incrementing numeric columns in table "messages" */
export type Messages_Inc_Input = {
  created_by?: InputMaybe<Scalars["Int"]>;
  thread_id?: InputMaybe<Scalars["Int"]>;
};

/** input type for inserting data into table "messages" */
export type Messages_Insert_Input = {
  body?: InputMaybe<Scalars["String"]>;
  created_at?: InputMaybe<Scalars["timestamptz"]>;
  created_by?: InputMaybe<Scalars["Int"]>;
  id?: InputMaybe<Scalars["uuid"]>;
  status?: InputMaybe<Scalars["String"]>;
  thread?: InputMaybe<Threads_Obj_Rel_Insert_Input>;
  thread_id?: InputMaybe<Scalars["Int"]>;
  updated_at?: InputMaybe<Scalars["timestamptz"]>;
  user?: InputMaybe<Users_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Messages_Max_Fields = {
  __typename?: "messages_max_fields";
  body?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  created_by?: Maybe<Scalars["Int"]>;
  id?: Maybe<Scalars["uuid"]>;
  status?: Maybe<Scalars["String"]>;
  thread_id?: Maybe<Scalars["Int"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "messages" */
export type Messages_Max_Order_By = {
  body?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  created_by?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Messages_Min_Fields = {
  __typename?: "messages_min_fields";
  body?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  created_by?: Maybe<Scalars["Int"]>;
  id?: Maybe<Scalars["uuid"]>;
  status?: Maybe<Scalars["String"]>;
  thread_id?: Maybe<Scalars["Int"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "messages" */
export type Messages_Min_Order_By = {
  body?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  created_by?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "messages" */
export type Messages_Mutation_Response = {
  __typename?: "messages_mutation_response";
  /** number of rows affected by the mutation */
  affected_rows: Scalars["Int"];
  /** data from the rows affected by the mutation */
  returning: Array<Messages>;
};

/** input type for inserting object relation for remote table "messages" */
export type Messages_Obj_Rel_Insert_Input = {
  data: Messages_Insert_Input;
  /** on conflict condition */
  on_conflict?: InputMaybe<Messages_On_Conflict>;
};

/** on conflict condition type for table "messages" */
export type Messages_On_Conflict = {
  constraint: Messages_Constraint;
  update_columns?: Array<Messages_Update_Column>;
  where?: InputMaybe<Messages_Bool_Exp>;
};

/** Ordering options when selecting data from "messages". */
export type Messages_Order_By = {
  body?: InputMaybe<Order_By>;
  created_at?: InputMaybe<Order_By>;
  created_by?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  status?: InputMaybe<Order_By>;
  thread?: InputMaybe<Threads_Order_By>;
  thread_id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  user?: InputMaybe<Users_Order_By>;
};

/** primary key columns input for table: messages */
export type Messages_Pk_Columns_Input = {
  id: Scalars["uuid"];
};

/** select columns of table "messages" */
export enum Messages_Select_Column {
  /** column name */
  Body = "body",
  /** column name */
  CreatedAt = "created_at",
  /** column name */
  CreatedBy = "created_by",
  /** column name */
  Id = "id",
  /** column name */
  Status = "status",
  /** column name */
  ThreadId = "thread_id",
  /** column name */
  UpdatedAt = "updated_at",
}

/** input type for updating data in table "messages" */
export type Messages_Set_Input = {
  body?: InputMaybe<Scalars["String"]>;
  created_at?: InputMaybe<Scalars["timestamptz"]>;
  created_by?: InputMaybe<Scalars["Int"]>;
  id?: InputMaybe<Scalars["uuid"]>;
  status?: InputMaybe<Scalars["String"]>;
  thread_id?: InputMaybe<Scalars["Int"]>;
  updated_at?: InputMaybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Messages_Stddev_Fields = {
  __typename?: "messages_stddev_fields";
  created_by?: Maybe<Scalars["Float"]>;
  thread_id?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "messages" */
export type Messages_Stddev_Order_By = {
  created_by?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Messages_Stddev_Pop_Fields = {
  __typename?: "messages_stddev_pop_fields";
  created_by?: Maybe<Scalars["Float"]>;
  thread_id?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "messages" */
export type Messages_Stddev_Pop_Order_By = {
  created_by?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Messages_Stddev_Samp_Fields = {
  __typename?: "messages_stddev_samp_fields";
  created_by?: Maybe<Scalars["Float"]>;
  thread_id?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "messages" */
export type Messages_Stddev_Samp_Order_By = {
  created_by?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
};

/** aggregate sum on columns */
export type Messages_Sum_Fields = {
  __typename?: "messages_sum_fields";
  created_by?: Maybe<Scalars["Int"]>;
  thread_id?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "messages" */
export type Messages_Sum_Order_By = {
  created_by?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
};

/** update columns of table "messages" */
export enum Messages_Update_Column {
  /** column name */
  Body = "body",
  /** column name */
  CreatedAt = "created_at",
  /** column name */
  CreatedBy = "created_by",
  /** column name */
  Id = "id",
  /** column name */
  Status = "status",
  /** column name */
  ThreadId = "thread_id",
  /** column name */
  UpdatedAt = "updated_at",
}

/** aggregate var_pop on columns */
export type Messages_Var_Pop_Fields = {
  __typename?: "messages_var_pop_fields";
  created_by?: Maybe<Scalars["Float"]>;
  thread_id?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "messages" */
export type Messages_Var_Pop_Order_By = {
  created_by?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Messages_Var_Samp_Fields = {
  __typename?: "messages_var_samp_fields";
  created_by?: Maybe<Scalars["Float"]>;
  thread_id?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "messages" */
export type Messages_Var_Samp_Order_By = {
  created_by?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Messages_Variance_Fields = {
  __typename?: "messages_variance_fields";
  created_by?: Maybe<Scalars["Float"]>;
  thread_id?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "messages" */
export type Messages_Variance_Order_By = {
  created_by?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
};

/** mutation root */
export type Mutation_Root = {
  __typename?: "mutation_root";
  /** delete data from the table: "messages" */
  delete_messages?: Maybe<Messages_Mutation_Response>;
  /** delete single row from the table: "messages" */
  delete_messages_by_pk?: Maybe<Messages>;
  /** delete data from the table: "threads" */
  delete_threads?: Maybe<Threads_Mutation_Response>;
  /** delete single row from the table: "threads" */
  delete_threads_by_pk?: Maybe<Threads>;
  /** delete data from the table: "threads_users" */
  delete_threads_users?: Maybe<Threads_Users_Mutation_Response>;
  /** delete single row from the table: "threads_users" */
  delete_threads_users_by_pk?: Maybe<Threads_Users>;
  /** delete data from the table: "users" */
  delete_users?: Maybe<Users_Mutation_Response>;
  /** delete single row from the table: "users" */
  delete_users_by_pk?: Maybe<Users>;
  /** insert data into the table: "messages" */
  insert_messages?: Maybe<Messages_Mutation_Response>;
  /** insert a single row into the table: "messages" */
  insert_messages_one?: Maybe<Messages>;
  /** insert data into the table: "threads" */
  insert_threads?: Maybe<Threads_Mutation_Response>;
  /** insert a single row into the table: "threads" */
  insert_threads_one?: Maybe<Threads>;
  /** insert data into the table: "threads_users" */
  insert_threads_users?: Maybe<Threads_Users_Mutation_Response>;
  /** insert a single row into the table: "threads_users" */
  insert_threads_users_one?: Maybe<Threads_Users>;
  /** insert data into the table: "users" */
  insert_users?: Maybe<Users_Mutation_Response>;
  /** insert a single row into the table: "users" */
  insert_users_one?: Maybe<Users>;
  /** update data of the table: "messages" */
  update_messages?: Maybe<Messages_Mutation_Response>;
  /** update single row of the table: "messages" */
  update_messages_by_pk?: Maybe<Messages>;
  /** update data of the table: "threads" */
  update_threads?: Maybe<Threads_Mutation_Response>;
  /** update single row of the table: "threads" */
  update_threads_by_pk?: Maybe<Threads>;
  /** update data of the table: "threads_users" */
  update_threads_users?: Maybe<Threads_Users_Mutation_Response>;
  /** update single row of the table: "threads_users" */
  update_threads_users_by_pk?: Maybe<Threads_Users>;
  /** update data of the table: "users" */
  update_users?: Maybe<Users_Mutation_Response>;
  /** update single row of the table: "users" */
  update_users_by_pk?: Maybe<Users>;
};

/** mutation root */
export type Mutation_RootDelete_MessagesArgs = {
  where: Messages_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Messages_By_PkArgs = {
  id: Scalars["uuid"];
};

/** mutation root */
export type Mutation_RootDelete_ThreadsArgs = {
  where: Threads_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Threads_By_PkArgs = {
  id: Scalars["Int"];
};

/** mutation root */
export type Mutation_RootDelete_Threads_UsersArgs = {
  where: Threads_Users_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Threads_Users_By_PkArgs = {
  id: Scalars["Int"];
};

/** mutation root */
export type Mutation_RootDelete_UsersArgs = {
  where: Users_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Users_By_PkArgs = {
  id: Scalars["Int"];
};

/** mutation root */
export type Mutation_RootInsert_MessagesArgs = {
  objects: Array<Messages_Insert_Input>;
  on_conflict?: InputMaybe<Messages_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Messages_OneArgs = {
  object: Messages_Insert_Input;
  on_conflict?: InputMaybe<Messages_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_ThreadsArgs = {
  objects: Array<Threads_Insert_Input>;
  on_conflict?: InputMaybe<Threads_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Threads_OneArgs = {
  object: Threads_Insert_Input;
  on_conflict?: InputMaybe<Threads_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Threads_UsersArgs = {
  objects: Array<Threads_Users_Insert_Input>;
  on_conflict?: InputMaybe<Threads_Users_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Threads_Users_OneArgs = {
  object: Threads_Users_Insert_Input;
  on_conflict?: InputMaybe<Threads_Users_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_UsersArgs = {
  objects: Array<Users_Insert_Input>;
  on_conflict?: InputMaybe<Users_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Users_OneArgs = {
  object: Users_Insert_Input;
  on_conflict?: InputMaybe<Users_On_Conflict>;
};

/** mutation root */
export type Mutation_RootUpdate_MessagesArgs = {
  _inc?: InputMaybe<Messages_Inc_Input>;
  _set?: InputMaybe<Messages_Set_Input>;
  where: Messages_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Messages_By_PkArgs = {
  _inc?: InputMaybe<Messages_Inc_Input>;
  _set?: InputMaybe<Messages_Set_Input>;
  pk_columns: Messages_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_ThreadsArgs = {
  _inc?: InputMaybe<Threads_Inc_Input>;
  _set?: InputMaybe<Threads_Set_Input>;
  where: Threads_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Threads_By_PkArgs = {
  _inc?: InputMaybe<Threads_Inc_Input>;
  _set?: InputMaybe<Threads_Set_Input>;
  pk_columns: Threads_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Threads_UsersArgs = {
  _inc?: InputMaybe<Threads_Users_Inc_Input>;
  _set?: InputMaybe<Threads_Users_Set_Input>;
  where: Threads_Users_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Threads_Users_By_PkArgs = {
  _inc?: InputMaybe<Threads_Users_Inc_Input>;
  _set?: InputMaybe<Threads_Users_Set_Input>;
  pk_columns: Threads_Users_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_UsersArgs = {
  _inc?: InputMaybe<Users_Inc_Input>;
  _set?: InputMaybe<Users_Set_Input>;
  where: Users_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Users_By_PkArgs = {
  _inc?: InputMaybe<Users_Inc_Input>;
  _set?: InputMaybe<Users_Set_Input>;
  pk_columns: Users_Pk_Columns_Input;
};

/** column ordering options */
export enum Order_By {
  /** in ascending order, nulls last */
  Asc = "asc",
  /** in ascending order, nulls first */
  AscNullsFirst = "asc_nulls_first",
  /** in ascending order, nulls last */
  AscNullsLast = "asc_nulls_last",
  /** in descending order, nulls first */
  Desc = "desc",
  /** in descending order, nulls first */
  DescNullsFirst = "desc_nulls_first",
  /** in descending order, nulls last */
  DescNullsLast = "desc_nulls_last",
}

export type Query_Root = {
  __typename?: "query_root";
  /** An array relationship */
  messages: Array<Messages>;
  /** An aggregate relationship */
  messages_aggregate: Messages_Aggregate;
  /** fetch data from the table: "messages" using primary key columns */
  messages_by_pk?: Maybe<Messages>;
  /** An array relationship */
  threads: Array<Threads>;
  /** An aggregate relationship */
  threads_aggregate: Threads_Aggregate;
  /** fetch data from the table: "threads" using primary key columns */
  threads_by_pk?: Maybe<Threads>;
  /** An array relationship */
  threads_users: Array<Threads_Users>;
  /** An aggregate relationship */
  threads_users_aggregate: Threads_Users_Aggregate;
  /** fetch data from the table: "threads_users" using primary key columns */
  threads_users_by_pk?: Maybe<Threads_Users>;
  /** fetch data from the table: "users" */
  users: Array<Users>;
  /** fetch aggregated fields from the table: "users" */
  users_aggregate: Users_Aggregate;
  /** fetch data from the table: "users" using primary key columns */
  users_by_pk?: Maybe<Users>;
};

export type Query_RootMessagesArgs = {
  distinct_on?: InputMaybe<Array<Messages_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Messages_Order_By>>;
  where?: InputMaybe<Messages_Bool_Exp>;
};

export type Query_RootMessages_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Messages_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Messages_Order_By>>;
  where?: InputMaybe<Messages_Bool_Exp>;
};

export type Query_RootMessages_By_PkArgs = {
  id: Scalars["uuid"];
};

export type Query_RootThreadsArgs = {
  distinct_on?: InputMaybe<Array<Threads_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Threads_Order_By>>;
  where?: InputMaybe<Threads_Bool_Exp>;
};

export type Query_RootThreads_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Threads_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Threads_Order_By>>;
  where?: InputMaybe<Threads_Bool_Exp>;
};

export type Query_RootThreads_By_PkArgs = {
  id: Scalars["Int"];
};

export type Query_RootThreads_UsersArgs = {
  distinct_on?: InputMaybe<Array<Threads_Users_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Threads_Users_Order_By>>;
  where?: InputMaybe<Threads_Users_Bool_Exp>;
};

export type Query_RootThreads_Users_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Threads_Users_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Threads_Users_Order_By>>;
  where?: InputMaybe<Threads_Users_Bool_Exp>;
};

export type Query_RootThreads_Users_By_PkArgs = {
  id: Scalars["Int"];
};

export type Query_RootUsersArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};

export type Query_RootUsers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};

export type Query_RootUsers_By_PkArgs = {
  id: Scalars["Int"];
};

export type Subscription_Root = {
  __typename?: "subscription_root";
  /** An array relationship */
  messages: Array<Messages>;
  /** An aggregate relationship */
  messages_aggregate: Messages_Aggregate;
  /** fetch data from the table: "messages" using primary key columns */
  messages_by_pk?: Maybe<Messages>;
  /** An array relationship */
  threads: Array<Threads>;
  /** An aggregate relationship */
  threads_aggregate: Threads_Aggregate;
  /** fetch data from the table: "threads" using primary key columns */
  threads_by_pk?: Maybe<Threads>;
  /** An array relationship */
  threads_users: Array<Threads_Users>;
  /** An aggregate relationship */
  threads_users_aggregate: Threads_Users_Aggregate;
  /** fetch data from the table: "threads_users" using primary key columns */
  threads_users_by_pk?: Maybe<Threads_Users>;
  /** fetch data from the table: "users" */
  users: Array<Users>;
  /** fetch aggregated fields from the table: "users" */
  users_aggregate: Users_Aggregate;
  /** fetch data from the table: "users" using primary key columns */
  users_by_pk?: Maybe<Users>;
};

export type Subscription_RootMessagesArgs = {
  distinct_on?: InputMaybe<Array<Messages_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Messages_Order_By>>;
  where?: InputMaybe<Messages_Bool_Exp>;
};

export type Subscription_RootMessages_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Messages_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Messages_Order_By>>;
  where?: InputMaybe<Messages_Bool_Exp>;
};

export type Subscription_RootMessages_By_PkArgs = {
  id: Scalars["uuid"];
};

export type Subscription_RootThreadsArgs = {
  distinct_on?: InputMaybe<Array<Threads_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Threads_Order_By>>;
  where?: InputMaybe<Threads_Bool_Exp>;
};

export type Subscription_RootThreads_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Threads_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Threads_Order_By>>;
  where?: InputMaybe<Threads_Bool_Exp>;
};

export type Subscription_RootThreads_By_PkArgs = {
  id: Scalars["Int"];
};

export type Subscription_RootThreads_UsersArgs = {
  distinct_on?: InputMaybe<Array<Threads_Users_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Threads_Users_Order_By>>;
  where?: InputMaybe<Threads_Users_Bool_Exp>;
};

export type Subscription_RootThreads_Users_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Threads_Users_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Threads_Users_Order_By>>;
  where?: InputMaybe<Threads_Users_Bool_Exp>;
};

export type Subscription_RootThreads_Users_By_PkArgs = {
  id: Scalars["Int"];
};

export type Subscription_RootUsersArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};

export type Subscription_RootUsers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};

export type Subscription_RootUsers_By_PkArgs = {
  id: Scalars["Int"];
};

/** columns and relationships of "threads" */
export type Threads = {
  __typename?: "threads";
  created_at: Scalars["timestamptz"];
  created_by: Scalars["Int"];
  id: Scalars["Int"];
  /** An object relationship */
  latest_message?: Maybe<Messages>;
  /** An array relationship */
  messages: Array<Messages>;
  /** An aggregate relationship */
  messages_aggregate: Messages_Aggregate;
  /** An array relationship */
  testing_this: Array<Messages>;
  /** An aggregate relationship */
  testing_this_aggregate: Messages_Aggregate;
  /** An array relationship */
  threads_users: Array<Threads_Users>;
  /** An aggregate relationship */
  threads_users_aggregate: Threads_Users_Aggregate;
  updated_at: Scalars["timestamptz"];
  /** An object relationship */
  user: Users;
};

/** columns and relationships of "threads" */
export type ThreadsMessagesArgs = {
  distinct_on?: InputMaybe<Array<Messages_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Messages_Order_By>>;
  where?: InputMaybe<Messages_Bool_Exp>;
};

/** columns and relationships of "threads" */
export type ThreadsMessages_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Messages_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Messages_Order_By>>;
  where?: InputMaybe<Messages_Bool_Exp>;
};

/** columns and relationships of "threads" */
export type ThreadsTesting_ThisArgs = {
  distinct_on?: InputMaybe<Array<Messages_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Messages_Order_By>>;
  where?: InputMaybe<Messages_Bool_Exp>;
};

/** columns and relationships of "threads" */
export type ThreadsTesting_This_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Messages_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Messages_Order_By>>;
  where?: InputMaybe<Messages_Bool_Exp>;
};

/** columns and relationships of "threads" */
export type ThreadsThreads_UsersArgs = {
  distinct_on?: InputMaybe<Array<Threads_Users_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Threads_Users_Order_By>>;
  where?: InputMaybe<Threads_Users_Bool_Exp>;
};

/** columns and relationships of "threads" */
export type ThreadsThreads_Users_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Threads_Users_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Threads_Users_Order_By>>;
  where?: InputMaybe<Threads_Users_Bool_Exp>;
};

/** aggregated selection of "threads" */
export type Threads_Aggregate = {
  __typename?: "threads_aggregate";
  aggregate?: Maybe<Threads_Aggregate_Fields>;
  nodes: Array<Threads>;
};

/** aggregate fields of "threads" */
export type Threads_Aggregate_Fields = {
  __typename?: "threads_aggregate_fields";
  avg?: Maybe<Threads_Avg_Fields>;
  count: Scalars["Int"];
  max?: Maybe<Threads_Max_Fields>;
  min?: Maybe<Threads_Min_Fields>;
  stddev?: Maybe<Threads_Stddev_Fields>;
  stddev_pop?: Maybe<Threads_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Threads_Stddev_Samp_Fields>;
  sum?: Maybe<Threads_Sum_Fields>;
  var_pop?: Maybe<Threads_Var_Pop_Fields>;
  var_samp?: Maybe<Threads_Var_Samp_Fields>;
  variance?: Maybe<Threads_Variance_Fields>;
};

/** aggregate fields of "threads" */
export type Threads_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Threads_Select_Column>>;
  distinct?: InputMaybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "threads" */
export type Threads_Aggregate_Order_By = {
  avg?: InputMaybe<Threads_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Threads_Max_Order_By>;
  min?: InputMaybe<Threads_Min_Order_By>;
  stddev?: InputMaybe<Threads_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Threads_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Threads_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Threads_Sum_Order_By>;
  var_pop?: InputMaybe<Threads_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Threads_Var_Samp_Order_By>;
  variance?: InputMaybe<Threads_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "threads" */
export type Threads_Arr_Rel_Insert_Input = {
  data: Array<Threads_Insert_Input>;
  /** on conflict condition */
  on_conflict?: InputMaybe<Threads_On_Conflict>;
};

/** aggregate avg on columns */
export type Threads_Avg_Fields = {
  __typename?: "threads_avg_fields";
  created_by?: Maybe<Scalars["Float"]>;
  id?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "threads" */
export type Threads_Avg_Order_By = {
  created_by?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "threads". All fields are combined with a logical 'AND'. */
export type Threads_Bool_Exp = {
  _and?: InputMaybe<Array<Threads_Bool_Exp>>;
  _not?: InputMaybe<Threads_Bool_Exp>;
  _or?: InputMaybe<Array<Threads_Bool_Exp>>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  created_by?: InputMaybe<Int_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  latest_message?: InputMaybe<Messages_Bool_Exp>;
  messages?: InputMaybe<Messages_Bool_Exp>;
  testing_this?: InputMaybe<Messages_Bool_Exp>;
  threads_users?: InputMaybe<Threads_Users_Bool_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  user?: InputMaybe<Users_Bool_Exp>;
};

/** unique or primary key constraints on table "threads" */
export enum Threads_Constraint {
  /** unique or primary key constraint */
  ThreadsPkey = "threads_pkey",
}

/** input type for incrementing numeric columns in table "threads" */
export type Threads_Inc_Input = {
  created_by?: InputMaybe<Scalars["Int"]>;
  id?: InputMaybe<Scalars["Int"]>;
};

/** input type for inserting data into table "threads" */
export type Threads_Insert_Input = {
  created_at?: InputMaybe<Scalars["timestamptz"]>;
  created_by?: InputMaybe<Scalars["Int"]>;
  id?: InputMaybe<Scalars["Int"]>;
  latest_message?: InputMaybe<Messages_Obj_Rel_Insert_Input>;
  messages?: InputMaybe<Messages_Arr_Rel_Insert_Input>;
  testing_this?: InputMaybe<Messages_Arr_Rel_Insert_Input>;
  threads_users?: InputMaybe<Threads_Users_Arr_Rel_Insert_Input>;
  updated_at?: InputMaybe<Scalars["timestamptz"]>;
  user?: InputMaybe<Users_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Threads_Max_Fields = {
  __typename?: "threads_max_fields";
  created_at?: Maybe<Scalars["timestamptz"]>;
  created_by?: Maybe<Scalars["Int"]>;
  id?: Maybe<Scalars["Int"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by max() on columns of table "threads" */
export type Threads_Max_Order_By = {
  created_at?: InputMaybe<Order_By>;
  created_by?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Threads_Min_Fields = {
  __typename?: "threads_min_fields";
  created_at?: Maybe<Scalars["timestamptz"]>;
  created_by?: Maybe<Scalars["Int"]>;
  id?: Maybe<Scalars["Int"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** order by min() on columns of table "threads" */
export type Threads_Min_Order_By = {
  created_at?: InputMaybe<Order_By>;
  created_by?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "threads" */
export type Threads_Mutation_Response = {
  __typename?: "threads_mutation_response";
  /** number of rows affected by the mutation */
  affected_rows: Scalars["Int"];
  /** data from the rows affected by the mutation */
  returning: Array<Threads>;
};

/** input type for inserting object relation for remote table "threads" */
export type Threads_Obj_Rel_Insert_Input = {
  data: Threads_Insert_Input;
  /** on conflict condition */
  on_conflict?: InputMaybe<Threads_On_Conflict>;
};

/** on conflict condition type for table "threads" */
export type Threads_On_Conflict = {
  constraint: Threads_Constraint;
  update_columns?: Array<Threads_Update_Column>;
  where?: InputMaybe<Threads_Bool_Exp>;
};

/** Ordering options when selecting data from "threads". */
export type Threads_Order_By = {
  created_at?: InputMaybe<Order_By>;
  created_by?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  latest_message?: InputMaybe<Messages_Order_By>;
  messages_aggregate?: InputMaybe<Messages_Aggregate_Order_By>;
  testing_this_aggregate?: InputMaybe<Messages_Aggregate_Order_By>;
  threads_users_aggregate?: InputMaybe<Threads_Users_Aggregate_Order_By>;
  updated_at?: InputMaybe<Order_By>;
  user?: InputMaybe<Users_Order_By>;
};

/** primary key columns input for table: threads */
export type Threads_Pk_Columns_Input = {
  id: Scalars["Int"];
};

/** select columns of table "threads" */
export enum Threads_Select_Column {
  /** column name */
  CreatedAt = "created_at",
  /** column name */
  CreatedBy = "created_by",
  /** column name */
  Id = "id",
  /** column name */
  UpdatedAt = "updated_at",
}

/** input type for updating data in table "threads" */
export type Threads_Set_Input = {
  created_at?: InputMaybe<Scalars["timestamptz"]>;
  created_by?: InputMaybe<Scalars["Int"]>;
  id?: InputMaybe<Scalars["Int"]>;
  updated_at?: InputMaybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Threads_Stddev_Fields = {
  __typename?: "threads_stddev_fields";
  created_by?: Maybe<Scalars["Float"]>;
  id?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "threads" */
export type Threads_Stddev_Order_By = {
  created_by?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Threads_Stddev_Pop_Fields = {
  __typename?: "threads_stddev_pop_fields";
  created_by?: Maybe<Scalars["Float"]>;
  id?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "threads" */
export type Threads_Stddev_Pop_Order_By = {
  created_by?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Threads_Stddev_Samp_Fields = {
  __typename?: "threads_stddev_samp_fields";
  created_by?: Maybe<Scalars["Float"]>;
  id?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "threads" */
export type Threads_Stddev_Samp_Order_By = {
  created_by?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate sum on columns */
export type Threads_Sum_Fields = {
  __typename?: "threads_sum_fields";
  created_by?: Maybe<Scalars["Int"]>;
  id?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "threads" */
export type Threads_Sum_Order_By = {
  created_by?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** update columns of table "threads" */
export enum Threads_Update_Column {
  /** column name */
  CreatedAt = "created_at",
  /** column name */
  CreatedBy = "created_by",
  /** column name */
  Id = "id",
  /** column name */
  UpdatedAt = "updated_at",
}

/** columns and relationships of "threads_users" */
export type Threads_Users = {
  __typename?: "threads_users";
  created_at: Scalars["timestamptz"];
  id: Scalars["Int"];
  /** An object relationship */
  thread: Threads;
  thread_id: Scalars["Int"];
  updated_at: Scalars["timestamptz"];
  /** An object relationship */
  user: Users;
  user_id: Scalars["Int"];
};

/** aggregated selection of "threads_users" */
export type Threads_Users_Aggregate = {
  __typename?: "threads_users_aggregate";
  aggregate?: Maybe<Threads_Users_Aggregate_Fields>;
  nodes: Array<Threads_Users>;
};

/** aggregate fields of "threads_users" */
export type Threads_Users_Aggregate_Fields = {
  __typename?: "threads_users_aggregate_fields";
  avg?: Maybe<Threads_Users_Avg_Fields>;
  count: Scalars["Int"];
  max?: Maybe<Threads_Users_Max_Fields>;
  min?: Maybe<Threads_Users_Min_Fields>;
  stddev?: Maybe<Threads_Users_Stddev_Fields>;
  stddev_pop?: Maybe<Threads_Users_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Threads_Users_Stddev_Samp_Fields>;
  sum?: Maybe<Threads_Users_Sum_Fields>;
  var_pop?: Maybe<Threads_Users_Var_Pop_Fields>;
  var_samp?: Maybe<Threads_Users_Var_Samp_Fields>;
  variance?: Maybe<Threads_Users_Variance_Fields>;
};

/** aggregate fields of "threads_users" */
export type Threads_Users_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Threads_Users_Select_Column>>;
  distinct?: InputMaybe<Scalars["Boolean"]>;
};

/** order by aggregate values of table "threads_users" */
export type Threads_Users_Aggregate_Order_By = {
  avg?: InputMaybe<Threads_Users_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Threads_Users_Max_Order_By>;
  min?: InputMaybe<Threads_Users_Min_Order_By>;
  stddev?: InputMaybe<Threads_Users_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Threads_Users_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Threads_Users_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Threads_Users_Sum_Order_By>;
  var_pop?: InputMaybe<Threads_Users_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Threads_Users_Var_Samp_Order_By>;
  variance?: InputMaybe<Threads_Users_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "threads_users" */
export type Threads_Users_Arr_Rel_Insert_Input = {
  data: Array<Threads_Users_Insert_Input>;
  /** on conflict condition */
  on_conflict?: InputMaybe<Threads_Users_On_Conflict>;
};

/** aggregate avg on columns */
export type Threads_Users_Avg_Fields = {
  __typename?: "threads_users_avg_fields";
  id?: Maybe<Scalars["Float"]>;
  thread_id?: Maybe<Scalars["Float"]>;
  user_id?: Maybe<Scalars["Float"]>;
};

/** order by avg() on columns of table "threads_users" */
export type Threads_Users_Avg_Order_By = {
  id?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
  user_id?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "threads_users". All fields are combined with a logical 'AND'. */
export type Threads_Users_Bool_Exp = {
  _and?: InputMaybe<Array<Threads_Users_Bool_Exp>>;
  _not?: InputMaybe<Threads_Users_Bool_Exp>;
  _or?: InputMaybe<Array<Threads_Users_Bool_Exp>>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  thread?: InputMaybe<Threads_Bool_Exp>;
  thread_id?: InputMaybe<Int_Comparison_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  user?: InputMaybe<Users_Bool_Exp>;
  user_id?: InputMaybe<Int_Comparison_Exp>;
};

/** unique or primary key constraints on table "threads_users" */
export enum Threads_Users_Constraint {
  /** unique or primary key constraint */
  ThreadsUsersPkey = "threads_users_pkey",
}

/** input type for incrementing numeric columns in table "threads_users" */
export type Threads_Users_Inc_Input = {
  id?: InputMaybe<Scalars["Int"]>;
  thread_id?: InputMaybe<Scalars["Int"]>;
  user_id?: InputMaybe<Scalars["Int"]>;
};

/** input type for inserting data into table "threads_users" */
export type Threads_Users_Insert_Input = {
  created_at?: InputMaybe<Scalars["timestamptz"]>;
  id?: InputMaybe<Scalars["Int"]>;
  thread?: InputMaybe<Threads_Obj_Rel_Insert_Input>;
  thread_id?: InputMaybe<Scalars["Int"]>;
  updated_at?: InputMaybe<Scalars["timestamptz"]>;
  user?: InputMaybe<Users_Obj_Rel_Insert_Input>;
  user_id?: InputMaybe<Scalars["Int"]>;
};

/** aggregate max on columns */
export type Threads_Users_Max_Fields = {
  __typename?: "threads_users_max_fields";
  created_at?: Maybe<Scalars["timestamptz"]>;
  id?: Maybe<Scalars["Int"]>;
  thread_id?: Maybe<Scalars["Int"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_id?: Maybe<Scalars["Int"]>;
};

/** order by max() on columns of table "threads_users" */
export type Threads_Users_Max_Order_By = {
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  user_id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Threads_Users_Min_Fields = {
  __typename?: "threads_users_min_fields";
  created_at?: Maybe<Scalars["timestamptz"]>;
  id?: Maybe<Scalars["Int"]>;
  thread_id?: Maybe<Scalars["Int"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_id?: Maybe<Scalars["Int"]>;
};

/** order by min() on columns of table "threads_users" */
export type Threads_Users_Min_Order_By = {
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  user_id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "threads_users" */
export type Threads_Users_Mutation_Response = {
  __typename?: "threads_users_mutation_response";
  /** number of rows affected by the mutation */
  affected_rows: Scalars["Int"];
  /** data from the rows affected by the mutation */
  returning: Array<Threads_Users>;
};

/** on conflict condition type for table "threads_users" */
export type Threads_Users_On_Conflict = {
  constraint: Threads_Users_Constraint;
  update_columns?: Array<Threads_Users_Update_Column>;
  where?: InputMaybe<Threads_Users_Bool_Exp>;
};

/** Ordering options when selecting data from "threads_users". */
export type Threads_Users_Order_By = {
  created_at?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  thread?: InputMaybe<Threads_Order_By>;
  thread_id?: InputMaybe<Order_By>;
  updated_at?: InputMaybe<Order_By>;
  user?: InputMaybe<Users_Order_By>;
  user_id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: threads_users */
export type Threads_Users_Pk_Columns_Input = {
  id: Scalars["Int"];
};

/** select columns of table "threads_users" */
export enum Threads_Users_Select_Column {
  /** column name */
  CreatedAt = "created_at",
  /** column name */
  Id = "id",
  /** column name */
  ThreadId = "thread_id",
  /** column name */
  UpdatedAt = "updated_at",
  /** column name */
  UserId = "user_id",
}

/** input type for updating data in table "threads_users" */
export type Threads_Users_Set_Input = {
  created_at?: InputMaybe<Scalars["timestamptz"]>;
  id?: InputMaybe<Scalars["Int"]>;
  thread_id?: InputMaybe<Scalars["Int"]>;
  updated_at?: InputMaybe<Scalars["timestamptz"]>;
  user_id?: InputMaybe<Scalars["Int"]>;
};

/** aggregate stddev on columns */
export type Threads_Users_Stddev_Fields = {
  __typename?: "threads_users_stddev_fields";
  id?: Maybe<Scalars["Float"]>;
  thread_id?: Maybe<Scalars["Float"]>;
  user_id?: Maybe<Scalars["Float"]>;
};

/** order by stddev() on columns of table "threads_users" */
export type Threads_Users_Stddev_Order_By = {
  id?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
  user_id?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Threads_Users_Stddev_Pop_Fields = {
  __typename?: "threads_users_stddev_pop_fields";
  id?: Maybe<Scalars["Float"]>;
  thread_id?: Maybe<Scalars["Float"]>;
  user_id?: Maybe<Scalars["Float"]>;
};

/** order by stddev_pop() on columns of table "threads_users" */
export type Threads_Users_Stddev_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
  user_id?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Threads_Users_Stddev_Samp_Fields = {
  __typename?: "threads_users_stddev_samp_fields";
  id?: Maybe<Scalars["Float"]>;
  thread_id?: Maybe<Scalars["Float"]>;
  user_id?: Maybe<Scalars["Float"]>;
};

/** order by stddev_samp() on columns of table "threads_users" */
export type Threads_Users_Stddev_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
  user_id?: InputMaybe<Order_By>;
};

/** aggregate sum on columns */
export type Threads_Users_Sum_Fields = {
  __typename?: "threads_users_sum_fields";
  id?: Maybe<Scalars["Int"]>;
  thread_id?: Maybe<Scalars["Int"]>;
  user_id?: Maybe<Scalars["Int"]>;
};

/** order by sum() on columns of table "threads_users" */
export type Threads_Users_Sum_Order_By = {
  id?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
  user_id?: InputMaybe<Order_By>;
};

/** update columns of table "threads_users" */
export enum Threads_Users_Update_Column {
  /** column name */
  CreatedAt = "created_at",
  /** column name */
  Id = "id",
  /** column name */
  ThreadId = "thread_id",
  /** column name */
  UpdatedAt = "updated_at",
  /** column name */
  UserId = "user_id",
}

/** aggregate var_pop on columns */
export type Threads_Users_Var_Pop_Fields = {
  __typename?: "threads_users_var_pop_fields";
  id?: Maybe<Scalars["Float"]>;
  thread_id?: Maybe<Scalars["Float"]>;
  user_id?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "threads_users" */
export type Threads_Users_Var_Pop_Order_By = {
  id?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
  user_id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Threads_Users_Var_Samp_Fields = {
  __typename?: "threads_users_var_samp_fields";
  id?: Maybe<Scalars["Float"]>;
  thread_id?: Maybe<Scalars["Float"]>;
  user_id?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "threads_users" */
export type Threads_Users_Var_Samp_Order_By = {
  id?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
  user_id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Threads_Users_Variance_Fields = {
  __typename?: "threads_users_variance_fields";
  id?: Maybe<Scalars["Float"]>;
  thread_id?: Maybe<Scalars["Float"]>;
  user_id?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "threads_users" */
export type Threads_Users_Variance_Order_By = {
  id?: InputMaybe<Order_By>;
  thread_id?: InputMaybe<Order_By>;
  user_id?: InputMaybe<Order_By>;
};

/** aggregate var_pop on columns */
export type Threads_Var_Pop_Fields = {
  __typename?: "threads_var_pop_fields";
  created_by?: Maybe<Scalars["Float"]>;
  id?: Maybe<Scalars["Float"]>;
};

/** order by var_pop() on columns of table "threads" */
export type Threads_Var_Pop_Order_By = {
  created_by?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Threads_Var_Samp_Fields = {
  __typename?: "threads_var_samp_fields";
  created_by?: Maybe<Scalars["Float"]>;
  id?: Maybe<Scalars["Float"]>;
};

/** order by var_samp() on columns of table "threads" */
export type Threads_Var_Samp_Order_By = {
  created_by?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Threads_Variance_Fields = {
  __typename?: "threads_variance_fields";
  created_by?: Maybe<Scalars["Float"]>;
  id?: Maybe<Scalars["Float"]>;
};

/** order by variance() on columns of table "threads" */
export type Threads_Variance_Order_By = {
  created_by?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
};

/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
export type Timestamptz_Comparison_Exp = {
  _eq?: InputMaybe<Scalars["timestamptz"]>;
  _gt?: InputMaybe<Scalars["timestamptz"]>;
  _gte?: InputMaybe<Scalars["timestamptz"]>;
  _in?: InputMaybe<Array<Scalars["timestamptz"]>>;
  _is_null?: InputMaybe<Scalars["Boolean"]>;
  _lt?: InputMaybe<Scalars["timestamptz"]>;
  _lte?: InputMaybe<Scalars["timestamptz"]>;
  _neq?: InputMaybe<Scalars["timestamptz"]>;
  _nin?: InputMaybe<Array<Scalars["timestamptz"]>>;
};

/** columns and relationships of "users" */
export type Users = {
  __typename?: "users";
  created_at: Scalars["timestamptz"];
  email: Scalars["String"];
  id: Scalars["Int"];
  image_url?: Maybe<Scalars["String"]>;
  /** An array relationship */
  messages: Array<Messages>;
  /** An aggregate relationship */
  messages_aggregate: Messages_Aggregate;
  name: Scalars["String"];
  /** An array relationship */
  threads: Array<Threads>;
  /** An aggregate relationship */
  threads_aggregate: Threads_Aggregate;
  /** An array relationship */
  threads_users: Array<Threads_Users>;
  /** An aggregate relationship */
  threads_users_aggregate: Threads_Users_Aggregate;
  updated_at: Scalars["timestamptz"];
};

/** columns and relationships of "users" */
export type UsersMessagesArgs = {
  distinct_on?: InputMaybe<Array<Messages_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Messages_Order_By>>;
  where?: InputMaybe<Messages_Bool_Exp>;
};

/** columns and relationships of "users" */
export type UsersMessages_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Messages_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Messages_Order_By>>;
  where?: InputMaybe<Messages_Bool_Exp>;
};

/** columns and relationships of "users" */
export type UsersThreadsArgs = {
  distinct_on?: InputMaybe<Array<Threads_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Threads_Order_By>>;
  where?: InputMaybe<Threads_Bool_Exp>;
};

/** columns and relationships of "users" */
export type UsersThreads_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Threads_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Threads_Order_By>>;
  where?: InputMaybe<Threads_Bool_Exp>;
};

/** columns and relationships of "users" */
export type UsersThreads_UsersArgs = {
  distinct_on?: InputMaybe<Array<Threads_Users_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Threads_Users_Order_By>>;
  where?: InputMaybe<Threads_Users_Bool_Exp>;
};

/** columns and relationships of "users" */
export type UsersThreads_Users_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Threads_Users_Select_Column>>;
  limit?: InputMaybe<Scalars["Int"]>;
  offset?: InputMaybe<Scalars["Int"]>;
  order_by?: InputMaybe<Array<Threads_Users_Order_By>>;
  where?: InputMaybe<Threads_Users_Bool_Exp>;
};

/** aggregated selection of "users" */
export type Users_Aggregate = {
  __typename?: "users_aggregate";
  aggregate?: Maybe<Users_Aggregate_Fields>;
  nodes: Array<Users>;
};

/** aggregate fields of "users" */
export type Users_Aggregate_Fields = {
  __typename?: "users_aggregate_fields";
  avg?: Maybe<Users_Avg_Fields>;
  count: Scalars["Int"];
  max?: Maybe<Users_Max_Fields>;
  min?: Maybe<Users_Min_Fields>;
  stddev?: Maybe<Users_Stddev_Fields>;
  stddev_pop?: Maybe<Users_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Users_Stddev_Samp_Fields>;
  sum?: Maybe<Users_Sum_Fields>;
  var_pop?: Maybe<Users_Var_Pop_Fields>;
  var_samp?: Maybe<Users_Var_Samp_Fields>;
  variance?: Maybe<Users_Variance_Fields>;
};

/** aggregate fields of "users" */
export type Users_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Users_Select_Column>>;
  distinct?: InputMaybe<Scalars["Boolean"]>;
};

/** aggregate avg on columns */
export type Users_Avg_Fields = {
  __typename?: "users_avg_fields";
  id?: Maybe<Scalars["Float"]>;
};

/** Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'. */
export type Users_Bool_Exp = {
  _and?: InputMaybe<Array<Users_Bool_Exp>>;
  _not?: InputMaybe<Users_Bool_Exp>;
  _or?: InputMaybe<Array<Users_Bool_Exp>>;
  created_at?: InputMaybe<Timestamptz_Comparison_Exp>;
  email?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Int_Comparison_Exp>;
  image_url?: InputMaybe<String_Comparison_Exp>;
  messages?: InputMaybe<Messages_Bool_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  threads?: InputMaybe<Threads_Bool_Exp>;
  threads_users?: InputMaybe<Threads_Users_Bool_Exp>;
  updated_at?: InputMaybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "users" */
export enum Users_Constraint {
  /** unique or primary key constraint */
  UsersEmailKey = "users_email_key",
  /** unique or primary key constraint */
  UsersPkey = "users_pkey",
}

/** input type for incrementing numeric columns in table "users" */
export type Users_Inc_Input = {
  id?: InputMaybe<Scalars["Int"]>;
};

/** input type for inserting data into table "users" */
export type Users_Insert_Input = {
  created_at?: InputMaybe<Scalars["timestamptz"]>;
  email?: InputMaybe<Scalars["String"]>;
  id?: InputMaybe<Scalars["Int"]>;
  image_url?: InputMaybe<Scalars["String"]>;
  messages?: InputMaybe<Messages_Arr_Rel_Insert_Input>;
  name?: InputMaybe<Scalars["String"]>;
  threads?: InputMaybe<Threads_Arr_Rel_Insert_Input>;
  threads_users?: InputMaybe<Threads_Users_Arr_Rel_Insert_Input>;
  updated_at?: InputMaybe<Scalars["timestamptz"]>;
};

/** aggregate max on columns */
export type Users_Max_Fields = {
  __typename?: "users_max_fields";
  created_at?: Maybe<Scalars["timestamptz"]>;
  email?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["Int"]>;
  image_url?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** aggregate min on columns */
export type Users_Min_Fields = {
  __typename?: "users_min_fields";
  created_at?: Maybe<Scalars["timestamptz"]>;
  email?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["Int"]>;
  image_url?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
};

/** response of any mutation on the table "users" */
export type Users_Mutation_Response = {
  __typename?: "users_mutation_response";
  /** number of rows affected by the mutation */
  affected_rows: Scalars["Int"];
  /** data from the rows affected by the mutation */
  returning: Array<Users>;
};

/** input type for inserting object relation for remote table "users" */
export type Users_Obj_Rel_Insert_Input = {
  data: Users_Insert_Input;
  /** on conflict condition */
  on_conflict?: InputMaybe<Users_On_Conflict>;
};

/** on conflict condition type for table "users" */
export type Users_On_Conflict = {
  constraint: Users_Constraint;
  update_columns?: Array<Users_Update_Column>;
  where?: InputMaybe<Users_Bool_Exp>;
};

/** Ordering options when selecting data from "users". */
export type Users_Order_By = {
  created_at?: InputMaybe<Order_By>;
  email?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  image_url?: InputMaybe<Order_By>;
  messages_aggregate?: InputMaybe<Messages_Aggregate_Order_By>;
  name?: InputMaybe<Order_By>;
  threads_aggregate?: InputMaybe<Threads_Aggregate_Order_By>;
  threads_users_aggregate?: InputMaybe<Threads_Users_Aggregate_Order_By>;
  updated_at?: InputMaybe<Order_By>;
};

/** primary key columns input for table: users */
export type Users_Pk_Columns_Input = {
  id: Scalars["Int"];
};

/** select columns of table "users" */
export enum Users_Select_Column {
  /** column name */
  CreatedAt = "created_at",
  /** column name */
  Email = "email",
  /** column name */
  Id = "id",
  /** column name */
  ImageUrl = "image_url",
  /** column name */
  Name = "name",
  /** column name */
  UpdatedAt = "updated_at",
}

/** input type for updating data in table "users" */
export type Users_Set_Input = {
  created_at?: InputMaybe<Scalars["timestamptz"]>;
  email?: InputMaybe<Scalars["String"]>;
  id?: InputMaybe<Scalars["Int"]>;
  image_url?: InputMaybe<Scalars["String"]>;
  name?: InputMaybe<Scalars["String"]>;
  updated_at?: InputMaybe<Scalars["timestamptz"]>;
};

/** aggregate stddev on columns */
export type Users_Stddev_Fields = {
  __typename?: "users_stddev_fields";
  id?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_pop on columns */
export type Users_Stddev_Pop_Fields = {
  __typename?: "users_stddev_pop_fields";
  id?: Maybe<Scalars["Float"]>;
};

/** aggregate stddev_samp on columns */
export type Users_Stddev_Samp_Fields = {
  __typename?: "users_stddev_samp_fields";
  id?: Maybe<Scalars["Float"]>;
};

/** aggregate sum on columns */
export type Users_Sum_Fields = {
  __typename?: "users_sum_fields";
  id?: Maybe<Scalars["Int"]>;
};

/** update columns of table "users" */
export enum Users_Update_Column {
  /** column name */
  CreatedAt = "created_at",
  /** column name */
  Email = "email",
  /** column name */
  Id = "id",
  /** column name */
  ImageUrl = "image_url",
  /** column name */
  Name = "name",
  /** column name */
  UpdatedAt = "updated_at",
}

/** aggregate var_pop on columns */
export type Users_Var_Pop_Fields = {
  __typename?: "users_var_pop_fields";
  id?: Maybe<Scalars["Float"]>;
};

/** aggregate var_samp on columns */
export type Users_Var_Samp_Fields = {
  __typename?: "users_var_samp_fields";
  id?: Maybe<Scalars["Float"]>;
};

/** aggregate variance on columns */
export type Users_Variance_Fields = {
  __typename?: "users_variance_fields";
  id?: Maybe<Scalars["Float"]>;
};

/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
export type Uuid_Comparison_Exp = {
  _eq?: InputMaybe<Scalars["uuid"]>;
  _gt?: InputMaybe<Scalars["uuid"]>;
  _gte?: InputMaybe<Scalars["uuid"]>;
  _in?: InputMaybe<Array<Scalars["uuid"]>>;
  _is_null?: InputMaybe<Scalars["Boolean"]>;
  _lt?: InputMaybe<Scalars["uuid"]>;
  _lte?: InputMaybe<Scalars["uuid"]>;
  _neq?: InputMaybe<Scalars["uuid"]>;
  _nin?: InputMaybe<Array<Scalars["uuid"]>>;
};
