/* eslint-disable */
// @generated by graphql-codegen
// This file was automatically generated and should not be edited.
import * as Types from '../../../../gql/types';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type GetPageByIdQueryVariables = Types.Exact<{
  id: Types.Scalars['Int'];
}>;


export type GetPageByIdQuery = { __typename?: 'query_root', page?: { __typename?: 'page', id: number, createdAt: any, updatedAt: any, status: string, slug: string, title: string, userByUpdatedById: { __typename?: 'user', fullName?: string | null | undefined } } | null | undefined };


export const GetPageByIdDocument = gql`
    query GetPageById($id: Int!) {
  page(id: $id) {
    id
    createdAt
    updatedAt
    status
    slug
    title
    userByUpdatedById {
      fullName
    }
  }
}
    `;

/**
 * __useGetPageByIdQuery__
 *
 * To run a query within a React component, call `useGetPageByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPageByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPageByIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetPageByIdQuery(baseOptions: Apollo.QueryHookOptions<GetPageByIdQuery, GetPageByIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPageByIdQuery, GetPageByIdQueryVariables>(GetPageByIdDocument, options);
      }
export function useGetPageByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPageByIdQuery, GetPageByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPageByIdQuery, GetPageByIdQueryVariables>(GetPageByIdDocument, options);
        }
export type GetPageByIdQueryHookResult = ReturnType<typeof useGetPageByIdQuery>;
export type GetPageByIdLazyQueryHookResult = ReturnType<typeof useGetPageByIdLazyQuery>;
export type GetPageByIdQueryResult = Apollo.QueryResult<GetPageByIdQuery, GetPageByIdQueryVariables>;