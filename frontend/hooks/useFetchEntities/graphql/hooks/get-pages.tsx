/* eslint-disable */
// @generated by graphql-codegen
// This file was automatically generated and should not be edited.
import * as Types from '../../../../gql/types';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions =  {}
export type GetPagesQueryVariables = Types.Exact<{
  limit: Types.Scalars['Int'];
  status: Types.Scalars['String'];
}>;


export type GetPagesQuery = { __typename?: 'query_root', pages: Array<{ __typename?: 'page', createdAt: any, id: number, slug: string, status: string, title: string, updatedAt: any, userByUpdatedById: { __typename?: 'user', fullName?: string | null | undefined, username?: string | null | undefined } }> };


export const GetPagesDocument = gql`
    query GetPages($limit: Int!, $status: String!) {
  pages(
    where: {status: {_eq: $status}}
    limit: $limit
    order_by: {createdAt: desc, title: asc}
  ) {
    createdAt
    id
    slug
    status
    title
    updatedAt
    userByUpdatedById {
      fullName
      username
    }
  }
}
    `;

/**
 * __useGetPagesQuery__
 *
 * To run a query within a React component, call `useGetPagesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPagesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPagesQuery({
 *   variables: {
 *      limit: // value for 'limit'
 *      status: // value for 'status'
 *   },
 * });
 */
export function useGetPagesQuery(baseOptions: Apollo.QueryHookOptions<GetPagesQuery, GetPagesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPagesQuery, GetPagesQueryVariables>(GetPagesDocument, options);
      }
export function useGetPagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPagesQuery, GetPagesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPagesQuery, GetPagesQueryVariables>(GetPagesDocument, options);
        }
export type GetPagesQueryHookResult = ReturnType<typeof useGetPagesQuery>;
export type GetPagesLazyQueryHookResult = ReturnType<typeof useGetPagesLazyQuery>;
export type GetPagesQueryResult = Apollo.QueryResult<GetPagesQuery, GetPagesQueryVariables>;