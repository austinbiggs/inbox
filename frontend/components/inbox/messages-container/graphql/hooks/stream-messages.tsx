/* eslint-disable */
// @generated by graphql-codegen
// This file was automatically generated and should not be edited.
import * as Types from "../../../../../gql/types";

import { gql } from "@apollo/client";
import * as Apollo from "@apollo/client";
const defaultOptions = {};
export type StreamMessagesSubscriptionVariables = Types.Exact<{
  threadId: Types.Scalars["Int"];
}>;

export type StreamMessagesSubscription = {
  __typename?: "subscription_root";
  messages: Array<{
    __typename?: "messages";
    body: string;
    status: string;
    created_at: any;
    created_by: number;
    id: any;
  }>;
};

export const StreamMessagesDocument = gql`
  subscription StreamMessages($threadId: Int!) {
    messages(
      order_by: { created_at: desc }
      where: { thread_id: { _eq: $threadId } }
    ) {
      body
      status
      created_at
      created_by
      id
    }
  }
`;

/**
 * __useStreamMessagesSubscription__
 *
 * To run a query within a React component, call `useStreamMessagesSubscription` and pass it any options that fit your needs.
 * When your component renders, `useStreamMessagesSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStreamMessagesSubscription({
 *   variables: {
 *      threadId: // value for 'threadId'
 *   },
 * });
 */
export function useStreamMessagesSubscription(
  baseOptions: Apollo.SubscriptionHookOptions<
    StreamMessagesSubscription,
    StreamMessagesSubscriptionVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSubscription<
    StreamMessagesSubscription,
    StreamMessagesSubscriptionVariables
  >(StreamMessagesDocument, options);
}
export type StreamMessagesSubscriptionHookResult = ReturnType<
  typeof useStreamMessagesSubscription
>;
export type StreamMessagesSubscriptionResult =
  Apollo.SubscriptionResult<StreamMessagesSubscription>;
