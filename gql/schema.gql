schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
  """
  measured in seconds
  """
  ttl: Int! = 60

  """
  refresh the cache entry
  """
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given pattern
  """
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

"""
columns and relationships of "messages"
"""
type messages {
  body: String!
  created_at: timestamptz!
  created_by: Int!
  id: uuid!
  status: String!

  """
  An object relationship
  """
  thread: threads!
  thread_id: Int!
  updated_at: timestamptz!

  """
  An object relationship
  """
  user: users!
}

"""
aggregated selection of "messages"
"""
type messages_aggregate {
  aggregate: messages_aggregate_fields
  nodes: [messages!]!
}

"""
aggregate fields of "messages"
"""
type messages_aggregate_fields {
  avg: messages_avg_fields
  count(columns: [messages_select_column!], distinct: Boolean): Int!
  max: messages_max_fields
  min: messages_min_fields
  stddev: messages_stddev_fields
  stddev_pop: messages_stddev_pop_fields
  stddev_samp: messages_stddev_samp_fields
  sum: messages_sum_fields
  var_pop: messages_var_pop_fields
  var_samp: messages_var_samp_fields
  variance: messages_variance_fields
}

"""
order by aggregate values of table "messages"
"""
input messages_aggregate_order_by {
  avg: messages_avg_order_by
  count: order_by
  max: messages_max_order_by
  min: messages_min_order_by
  stddev: messages_stddev_order_by
  stddev_pop: messages_stddev_pop_order_by
  stddev_samp: messages_stddev_samp_order_by
  sum: messages_sum_order_by
  var_pop: messages_var_pop_order_by
  var_samp: messages_var_samp_order_by
  variance: messages_variance_order_by
}

"""
input type for inserting array relation for remote table "messages"
"""
input messages_arr_rel_insert_input {
  data: [messages_insert_input!]!

  """
  on conflict condition
  """
  on_conflict: messages_on_conflict
}

"""
aggregate avg on columns
"""
type messages_avg_fields {
  created_by: Float
  thread_id: Float
}

"""
order by avg() on columns of table "messages"
"""
input messages_avg_order_by {
  created_by: order_by
  thread_id: order_by
}

"""
Boolean expression to filter rows from the table "messages". All fields are combined with a logical 'AND'.
"""
input messages_bool_exp {
  _and: [messages_bool_exp!]
  _not: messages_bool_exp
  _or: [messages_bool_exp!]
  body: String_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: Int_comparison_exp
  id: uuid_comparison_exp
  status: String_comparison_exp
  thread: threads_bool_exp
  thread_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
}

"""
unique or primary key constraints on table "messages"
"""
enum messages_constraint {
  """
  unique or primary key constraint
  """
  messages_pkey
}

"""
input type for incrementing numeric columns in table "messages"
"""
input messages_inc_input {
  created_by: Int
  thread_id: Int
}

"""
input type for inserting data into table "messages"
"""
input messages_insert_input {
  body: String
  created_at: timestamptz
  created_by: Int
  id: uuid
  status: String
  thread: threads_obj_rel_insert_input
  thread_id: Int
  updated_at: timestamptz
  user: users_obj_rel_insert_input
}

"""
aggregate max on columns
"""
type messages_max_fields {
  body: String
  created_at: timestamptz
  created_by: Int
  id: uuid
  status: String
  thread_id: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "messages"
"""
input messages_max_order_by {
  body: order_by
  created_at: order_by
  created_by: order_by
  id: order_by
  status: order_by
  thread_id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type messages_min_fields {
  body: String
  created_at: timestamptz
  created_by: Int
  id: uuid
  status: String
  thread_id: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "messages"
"""
input messages_min_order_by {
  body: order_by
  created_at: order_by
  created_by: order_by
  id: order_by
  status: order_by
  thread_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "messages"
"""
type messages_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [messages!]!
}

"""
input type for inserting object relation for remote table "messages"
"""
input messages_obj_rel_insert_input {
  data: messages_insert_input!

  """
  on conflict condition
  """
  on_conflict: messages_on_conflict
}

"""
on conflict condition type for table "messages"
"""
input messages_on_conflict {
  constraint: messages_constraint!
  update_columns: [messages_update_column!]! = []
  where: messages_bool_exp
}

"""
Ordering options when selecting data from "messages".
"""
input messages_order_by {
  body: order_by
  created_at: order_by
  created_by: order_by
  id: order_by
  status: order_by
  thread: threads_order_by
  thread_id: order_by
  updated_at: order_by
  user: users_order_by
}

"""
primary key columns input for table: messages
"""
input messages_pk_columns_input {
  id: uuid!
}

"""
select columns of table "messages"
"""
enum messages_select_column {
  """
  column name
  """
  body

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  id

  """
  column name
  """
  status

  """
  column name
  """
  thread_id

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "messages"
"""
input messages_set_input {
  body: String
  created_at: timestamptz
  created_by: Int
  id: uuid
  status: String
  thread_id: Int
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type messages_stddev_fields {
  created_by: Float
  thread_id: Float
}

"""
order by stddev() on columns of table "messages"
"""
input messages_stddev_order_by {
  created_by: order_by
  thread_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type messages_stddev_pop_fields {
  created_by: Float
  thread_id: Float
}

"""
order by stddev_pop() on columns of table "messages"
"""
input messages_stddev_pop_order_by {
  created_by: order_by
  thread_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type messages_stddev_samp_fields {
  created_by: Float
  thread_id: Float
}

"""
order by stddev_samp() on columns of table "messages"
"""
input messages_stddev_samp_order_by {
  created_by: order_by
  thread_id: order_by
}

"""
aggregate sum on columns
"""
type messages_sum_fields {
  created_by: Int
  thread_id: Int
}

"""
order by sum() on columns of table "messages"
"""
input messages_sum_order_by {
  created_by: order_by
  thread_id: order_by
}

"""
update columns of table "messages"
"""
enum messages_update_column {
  """
  column name
  """
  body

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  id

  """
  column name
  """
  status

  """
  column name
  """
  thread_id

  """
  column name
  """
  updated_at
}

"""
aggregate var_pop on columns
"""
type messages_var_pop_fields {
  created_by: Float
  thread_id: Float
}

"""
order by var_pop() on columns of table "messages"
"""
input messages_var_pop_order_by {
  created_by: order_by
  thread_id: order_by
}

"""
aggregate var_samp on columns
"""
type messages_var_samp_fields {
  created_by: Float
  thread_id: Float
}

"""
order by var_samp() on columns of table "messages"
"""
input messages_var_samp_order_by {
  created_by: order_by
  thread_id: order_by
}

"""
aggregate variance on columns
"""
type messages_variance_fields {
  created_by: Float
  thread_id: Float
}

"""
order by variance() on columns of table "messages"
"""
input messages_variance_order_by {
  created_by: order_by
  thread_id: order_by
}

"""
mutation root
"""
type mutation_root {
  """
  delete data from the table: "messages"
  """
  delete_messages(
    """
    filter the rows which have to be deleted
    """
    where: messages_bool_exp!
  ): messages_mutation_response

  """
  delete single row from the table: "messages"
  """
  delete_messages_by_pk(id: uuid!): messages

  """
  delete data from the table: "threads"
  """
  delete_threads(
    """
    filter the rows which have to be deleted
    """
    where: threads_bool_exp!
  ): threads_mutation_response

  """
  delete single row from the table: "threads"
  """
  delete_threads_by_pk(id: Int!): threads

  """
  delete data from the table: "threads_users"
  """
  delete_threads_users(
    """
    filter the rows which have to be deleted
    """
    where: threads_users_bool_exp!
  ): threads_users_mutation_response

  """
  delete single row from the table: "threads_users"
  """
  delete_threads_users_by_pk(id: Int!): threads_users

  """
  delete data from the table: "users"
  """
  delete_users(
    """
    filter the rows which have to be deleted
    """
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: Int!): users

  """
  insert data into the table: "messages"
  """
  insert_messages(
    """
    the rows to be inserted
    """
    objects: [messages_insert_input!]!

    """
    on conflict condition
    """
    on_conflict: messages_on_conflict
  ): messages_mutation_response

  """
  insert a single row into the table: "messages"
  """
  insert_messages_one(
    """
    the row to be inserted
    """
    object: messages_insert_input!

    """
    on conflict condition
    """
    on_conflict: messages_on_conflict
  ): messages

  """
  insert data into the table: "threads"
  """
  insert_threads(
    """
    the rows to be inserted
    """
    objects: [threads_insert_input!]!

    """
    on conflict condition
    """
    on_conflict: threads_on_conflict
  ): threads_mutation_response

  """
  insert a single row into the table: "threads"
  """
  insert_threads_one(
    """
    the row to be inserted
    """
    object: threads_insert_input!

    """
    on conflict condition
    """
    on_conflict: threads_on_conflict
  ): threads

  """
  insert data into the table: "threads_users"
  """
  insert_threads_users(
    """
    the rows to be inserted
    """
    objects: [threads_users_insert_input!]!

    """
    on conflict condition
    """
    on_conflict: threads_users_on_conflict
  ): threads_users_mutation_response

  """
  insert a single row into the table: "threads_users"
  """
  insert_threads_users_one(
    """
    the row to be inserted
    """
    object: threads_users_insert_input!

    """
    on conflict condition
    """
    on_conflict: threads_users_on_conflict
  ): threads_users

  """
  insert data into the table: "users"
  """
  insert_users(
    """
    the rows to be inserted
    """
    objects: [users_insert_input!]!

    """
    on conflict condition
    """
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """
    the row to be inserted
    """
    object: users_insert_input!

    """
    on conflict condition
    """
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "messages"
  """
  update_messages(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: messages_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: messages_set_input

    """
    filter the rows which have to be updated
    """
    where: messages_bool_exp!
  ): messages_mutation_response

  """
  update single row of the table: "messages"
  """
  update_messages_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: messages_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: messages_set_input
    pk_columns: messages_pk_columns_input!
  ): messages

  """
  update data of the table: "threads"
  """
  update_threads(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: threads_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: threads_set_input

    """
    filter the rows which have to be updated
    """
    where: threads_bool_exp!
  ): threads_mutation_response

  """
  update single row of the table: "threads"
  """
  update_threads_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: threads_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: threads_set_input
    pk_columns: threads_pk_columns_input!
  ): threads

  """
  update data of the table: "threads_users"
  """
  update_threads_users(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: threads_users_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: threads_users_set_input

    """
    filter the rows which have to be updated
    """
    where: threads_users_bool_exp!
  ): threads_users_mutation_response

  """
  update single row of the table: "threads_users"
  """
  update_threads_users_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: threads_users_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: threads_users_set_input
    pk_columns: threads_users_pk_columns_input!
  ): threads_users

  """
  update data of the table: "users"
  """
  update_users(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: users_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input

    """
    filter the rows which have to be updated
    """
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: users_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc

  """
  in ascending order, nulls first
  """
  asc_nulls_first

  """
  in ascending order, nulls last
  """
  asc_nulls_last

  """
  in descending order, nulls first
  """
  desc

  """
  in descending order, nulls first
  """
  desc_nulls_first

  """
  in descending order, nulls last
  """
  desc_nulls_last
}

type query_root {
  """
  An array relationship
  """
  messages(
    """
    distinct select on columns
    """
    distinct_on: [messages_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [messages_order_by!]

    """
    filter the rows returned
    """
    where: messages_bool_exp
  ): [messages!]!

  """
  An aggregate relationship
  """
  messages_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [messages_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [messages_order_by!]

    """
    filter the rows returned
    """
    where: messages_bool_exp
  ): messages_aggregate!

  """
  fetch data from the table: "messages" using primary key columns
  """
  messages_by_pk(id: uuid!): messages

  """
  An array relationship
  """
  threads(
    """
    distinct select on columns
    """
    distinct_on: [threads_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [threads_order_by!]

    """
    filter the rows returned
    """
    where: threads_bool_exp
  ): [threads!]!

  """
  An aggregate relationship
  """
  threads_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [threads_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [threads_order_by!]

    """
    filter the rows returned
    """
    where: threads_bool_exp
  ): threads_aggregate!

  """
  fetch data from the table: "threads" using primary key columns
  """
  threads_by_pk(id: Int!): threads

  """
  An array relationship
  """
  threads_users(
    """
    distinct select on columns
    """
    distinct_on: [threads_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [threads_users_order_by!]

    """
    filter the rows returned
    """
    where: threads_users_bool_exp
  ): [threads_users!]!

  """
  An aggregate relationship
  """
  threads_users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [threads_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [threads_users_order_by!]

    """
    filter the rows returned
    """
    where: threads_users_bool_exp
  ): threads_users_aggregate!

  """
  fetch data from the table: "threads_users" using primary key columns
  """
  threads_users_by_pk(id: Int!): threads_users

  """
  fetch data from the table: "users"
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: Int!): users
}

type subscription_root {
  """
  An array relationship
  """
  messages(
    """
    distinct select on columns
    """
    distinct_on: [messages_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [messages_order_by!]

    """
    filter the rows returned
    """
    where: messages_bool_exp
  ): [messages!]!

  """
  An aggregate relationship
  """
  messages_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [messages_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [messages_order_by!]

    """
    filter the rows returned
    """
    where: messages_bool_exp
  ): messages_aggregate!

  """
  fetch data from the table: "messages" using primary key columns
  """
  messages_by_pk(id: uuid!): messages

  """
  An array relationship
  """
  threads(
    """
    distinct select on columns
    """
    distinct_on: [threads_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [threads_order_by!]

    """
    filter the rows returned
    """
    where: threads_bool_exp
  ): [threads!]!

  """
  An aggregate relationship
  """
  threads_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [threads_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [threads_order_by!]

    """
    filter the rows returned
    """
    where: threads_bool_exp
  ): threads_aggregate!

  """
  fetch data from the table: "threads" using primary key columns
  """
  threads_by_pk(id: Int!): threads

  """
  An array relationship
  """
  threads_users(
    """
    distinct select on columns
    """
    distinct_on: [threads_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [threads_users_order_by!]

    """
    filter the rows returned
    """
    where: threads_users_bool_exp
  ): [threads_users!]!

  """
  An aggregate relationship
  """
  threads_users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [threads_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [threads_users_order_by!]

    """
    filter the rows returned
    """
    where: threads_users_bool_exp
  ): threads_users_aggregate!

  """
  fetch data from the table: "threads_users" using primary key columns
  """
  threads_users_by_pk(id: Int!): threads_users

  """
  fetch data from the table: "users"
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: Int!): users
}

"""
columns and relationships of "threads"
"""
type threads {
  created_at: timestamptz!
  created_by: Int!
  id: Int!

  """
  An object relationship
  """
  latest_message: messages

  """
  An array relationship
  """
  messages(
    """
    distinct select on columns
    """
    distinct_on: [messages_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [messages_order_by!]

    """
    filter the rows returned
    """
    where: messages_bool_exp
  ): [messages!]!

  """
  An aggregate relationship
  """
  messages_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [messages_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [messages_order_by!]

    """
    filter the rows returned
    """
    where: messages_bool_exp
  ): messages_aggregate!

  """
  An array relationship
  """
  testing_this(
    """
    distinct select on columns
    """
    distinct_on: [messages_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [messages_order_by!]

    """
    filter the rows returned
    """
    where: messages_bool_exp
  ): [messages!]!

  """
  An aggregate relationship
  """
  testing_this_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [messages_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [messages_order_by!]

    """
    filter the rows returned
    """
    where: messages_bool_exp
  ): messages_aggregate!

  """
  An array relationship
  """
  threads_users(
    """
    distinct select on columns
    """
    distinct_on: [threads_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [threads_users_order_by!]

    """
    filter the rows returned
    """
    where: threads_users_bool_exp
  ): [threads_users!]!

  """
  An aggregate relationship
  """
  threads_users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [threads_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [threads_users_order_by!]

    """
    filter the rows returned
    """
    where: threads_users_bool_exp
  ): threads_users_aggregate!
  updated_at: timestamptz!

  """
  An object relationship
  """
  user: users!
}

"""
aggregated selection of "threads"
"""
type threads_aggregate {
  aggregate: threads_aggregate_fields
  nodes: [threads!]!
}

"""
aggregate fields of "threads"
"""
type threads_aggregate_fields {
  avg: threads_avg_fields
  count(columns: [threads_select_column!], distinct: Boolean): Int!
  max: threads_max_fields
  min: threads_min_fields
  stddev: threads_stddev_fields
  stddev_pop: threads_stddev_pop_fields
  stddev_samp: threads_stddev_samp_fields
  sum: threads_sum_fields
  var_pop: threads_var_pop_fields
  var_samp: threads_var_samp_fields
  variance: threads_variance_fields
}

"""
order by aggregate values of table "threads"
"""
input threads_aggregate_order_by {
  avg: threads_avg_order_by
  count: order_by
  max: threads_max_order_by
  min: threads_min_order_by
  stddev: threads_stddev_order_by
  stddev_pop: threads_stddev_pop_order_by
  stddev_samp: threads_stddev_samp_order_by
  sum: threads_sum_order_by
  var_pop: threads_var_pop_order_by
  var_samp: threads_var_samp_order_by
  variance: threads_variance_order_by
}

"""
input type for inserting array relation for remote table "threads"
"""
input threads_arr_rel_insert_input {
  data: [threads_insert_input!]!

  """
  on conflict condition
  """
  on_conflict: threads_on_conflict
}

"""
aggregate avg on columns
"""
type threads_avg_fields {
  created_by: Float
  id: Float
}

"""
order by avg() on columns of table "threads"
"""
input threads_avg_order_by {
  created_by: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "threads". All fields are combined with a logical 'AND'.
"""
input threads_bool_exp {
  _and: [threads_bool_exp!]
  _not: threads_bool_exp
  _or: [threads_bool_exp!]
  created_at: timestamptz_comparison_exp
  created_by: Int_comparison_exp
  id: Int_comparison_exp
  latest_message: messages_bool_exp
  messages: messages_bool_exp
  testing_this: messages_bool_exp
  threads_users: threads_users_bool_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
}

"""
unique or primary key constraints on table "threads"
"""
enum threads_constraint {
  """
  unique or primary key constraint
  """
  threads_pkey
}

"""
input type for incrementing numeric columns in table "threads"
"""
input threads_inc_input {
  created_by: Int
  id: Int
}

"""
input type for inserting data into table "threads"
"""
input threads_insert_input {
  created_at: timestamptz
  created_by: Int
  id: Int
  latest_message: messages_obj_rel_insert_input
  messages: messages_arr_rel_insert_input
  testing_this: messages_arr_rel_insert_input
  threads_users: threads_users_arr_rel_insert_input
  updated_at: timestamptz
  user: users_obj_rel_insert_input
}

"""
aggregate max on columns
"""
type threads_max_fields {
  created_at: timestamptz
  created_by: Int
  id: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "threads"
"""
input threads_max_order_by {
  created_at: order_by
  created_by: order_by
  id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type threads_min_fields {
  created_at: timestamptz
  created_by: Int
  id: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "threads"
"""
input threads_min_order_by {
  created_at: order_by
  created_by: order_by
  id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "threads"
"""
type threads_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [threads!]!
}

"""
input type for inserting object relation for remote table "threads"
"""
input threads_obj_rel_insert_input {
  data: threads_insert_input!

  """
  on conflict condition
  """
  on_conflict: threads_on_conflict
}

"""
on conflict condition type for table "threads"
"""
input threads_on_conflict {
  constraint: threads_constraint!
  update_columns: [threads_update_column!]! = []
  where: threads_bool_exp
}

"""
Ordering options when selecting data from "threads".
"""
input threads_order_by {
  created_at: order_by
  created_by: order_by
  id: order_by
  latest_message: messages_order_by
  messages_aggregate: messages_aggregate_order_by
  testing_this_aggregate: messages_aggregate_order_by
  threads_users_aggregate: threads_users_aggregate_order_by
  updated_at: order_by
  user: users_order_by
}

"""
primary key columns input for table: threads
"""
input threads_pk_columns_input {
  id: Int!
}

"""
select columns of table "threads"
"""
enum threads_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  id

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "threads"
"""
input threads_set_input {
  created_at: timestamptz
  created_by: Int
  id: Int
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type threads_stddev_fields {
  created_by: Float
  id: Float
}

"""
order by stddev() on columns of table "threads"
"""
input threads_stddev_order_by {
  created_by: order_by
  id: order_by
}

"""
aggregate stddev_pop on columns
"""
type threads_stddev_pop_fields {
  created_by: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "threads"
"""
input threads_stddev_pop_order_by {
  created_by: order_by
  id: order_by
}

"""
aggregate stddev_samp on columns
"""
type threads_stddev_samp_fields {
  created_by: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "threads"
"""
input threads_stddev_samp_order_by {
  created_by: order_by
  id: order_by
}

"""
aggregate sum on columns
"""
type threads_sum_fields {
  created_by: Int
  id: Int
}

"""
order by sum() on columns of table "threads"
"""
input threads_sum_order_by {
  created_by: order_by
  id: order_by
}

"""
update columns of table "threads"
"""
enum threads_update_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  id

  """
  column name
  """
  updated_at
}

"""
columns and relationships of "threads_users"
"""
type threads_users {
  created_at: timestamptz!
  id: Int!

  """
  An object relationship
  """
  thread: threads!
  thread_id: Int!
  updated_at: timestamptz!

  """
  An object relationship
  """
  user: users!
  user_id: Int!
}

"""
aggregated selection of "threads_users"
"""
type threads_users_aggregate {
  aggregate: threads_users_aggregate_fields
  nodes: [threads_users!]!
}

"""
aggregate fields of "threads_users"
"""
type threads_users_aggregate_fields {
  avg: threads_users_avg_fields
  count(columns: [threads_users_select_column!], distinct: Boolean): Int!
  max: threads_users_max_fields
  min: threads_users_min_fields
  stddev: threads_users_stddev_fields
  stddev_pop: threads_users_stddev_pop_fields
  stddev_samp: threads_users_stddev_samp_fields
  sum: threads_users_sum_fields
  var_pop: threads_users_var_pop_fields
  var_samp: threads_users_var_samp_fields
  variance: threads_users_variance_fields
}

"""
order by aggregate values of table "threads_users"
"""
input threads_users_aggregate_order_by {
  avg: threads_users_avg_order_by
  count: order_by
  max: threads_users_max_order_by
  min: threads_users_min_order_by
  stddev: threads_users_stddev_order_by
  stddev_pop: threads_users_stddev_pop_order_by
  stddev_samp: threads_users_stddev_samp_order_by
  sum: threads_users_sum_order_by
  var_pop: threads_users_var_pop_order_by
  var_samp: threads_users_var_samp_order_by
  variance: threads_users_variance_order_by
}

"""
input type for inserting array relation for remote table "threads_users"
"""
input threads_users_arr_rel_insert_input {
  data: [threads_users_insert_input!]!

  """
  on conflict condition
  """
  on_conflict: threads_users_on_conflict
}

"""
aggregate avg on columns
"""
type threads_users_avg_fields {
  id: Float
  thread_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "threads_users"
"""
input threads_users_avg_order_by {
  id: order_by
  thread_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "threads_users". All fields are combined with a logical 'AND'.
"""
input threads_users_bool_exp {
  _and: [threads_users_bool_exp!]
  _not: threads_users_bool_exp
  _or: [threads_users_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  thread: threads_bool_exp
  thread_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "threads_users"
"""
enum threads_users_constraint {
  """
  unique or primary key constraint
  """
  threads_users_pkey
}

"""
input type for incrementing numeric columns in table "threads_users"
"""
input threads_users_inc_input {
  id: Int
  thread_id: Int
  user_id: Int
}

"""
input type for inserting data into table "threads_users"
"""
input threads_users_insert_input {
  created_at: timestamptz
  id: Int
  thread: threads_obj_rel_insert_input
  thread_id: Int
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: Int
}

"""
aggregate max on columns
"""
type threads_users_max_fields {
  created_at: timestamptz
  id: Int
  thread_id: Int
  updated_at: timestamptz
  user_id: Int
}

"""
order by max() on columns of table "threads_users"
"""
input threads_users_max_order_by {
  created_at: order_by
  id: order_by
  thread_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type threads_users_min_fields {
  created_at: timestamptz
  id: Int
  thread_id: Int
  updated_at: timestamptz
  user_id: Int
}

"""
order by min() on columns of table "threads_users"
"""
input threads_users_min_order_by {
  created_at: order_by
  id: order_by
  thread_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "threads_users"
"""
type threads_users_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [threads_users!]!
}

"""
on conflict condition type for table "threads_users"
"""
input threads_users_on_conflict {
  constraint: threads_users_constraint!
  update_columns: [threads_users_update_column!]! = []
  where: threads_users_bool_exp
}

"""
Ordering options when selecting data from "threads_users".
"""
input threads_users_order_by {
  created_at: order_by
  id: order_by
  thread: threads_order_by
  thread_id: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: threads_users
"""
input threads_users_pk_columns_input {
  id: Int!
}

"""
select columns of table "threads_users"
"""
enum threads_users_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  thread_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
input type for updating data in table "threads_users"
"""
input threads_users_set_input {
  created_at: timestamptz
  id: Int
  thread_id: Int
  updated_at: timestamptz
  user_id: Int
}

"""
aggregate stddev on columns
"""
type threads_users_stddev_fields {
  id: Float
  thread_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "threads_users"
"""
input threads_users_stddev_order_by {
  id: order_by
  thread_id: order_by
  user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type threads_users_stddev_pop_fields {
  id: Float
  thread_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "threads_users"
"""
input threads_users_stddev_pop_order_by {
  id: order_by
  thread_id: order_by
  user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type threads_users_stddev_samp_fields {
  id: Float
  thread_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "threads_users"
"""
input threads_users_stddev_samp_order_by {
  id: order_by
  thread_id: order_by
  user_id: order_by
}

"""
aggregate sum on columns
"""
type threads_users_sum_fields {
  id: Int
  thread_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "threads_users"
"""
input threads_users_sum_order_by {
  id: order_by
  thread_id: order_by
  user_id: order_by
}

"""
update columns of table "threads_users"
"""
enum threads_users_update_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  thread_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
aggregate var_pop on columns
"""
type threads_users_var_pop_fields {
  id: Float
  thread_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "threads_users"
"""
input threads_users_var_pop_order_by {
  id: order_by
  thread_id: order_by
  user_id: order_by
}

"""
aggregate var_samp on columns
"""
type threads_users_var_samp_fields {
  id: Float
  thread_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "threads_users"
"""
input threads_users_var_samp_order_by {
  id: order_by
  thread_id: order_by
  user_id: order_by
}

"""
aggregate variance on columns
"""
type threads_users_variance_fields {
  id: Float
  thread_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "threads_users"
"""
input threads_users_variance_order_by {
  id: order_by
  thread_id: order_by
  user_id: order_by
}

"""
aggregate var_pop on columns
"""
type threads_var_pop_fields {
  created_by: Float
  id: Float
}

"""
order by var_pop() on columns of table "threads"
"""
input threads_var_pop_order_by {
  created_by: order_by
  id: order_by
}

"""
aggregate var_samp on columns
"""
type threads_var_samp_fields {
  created_by: Float
  id: Float
}

"""
order by var_samp() on columns of table "threads"
"""
input threads_var_samp_order_by {
  created_by: order_by
  id: order_by
}

"""
aggregate variance on columns
"""
type threads_variance_fields {
  created_by: Float
  id: Float
}

"""
order by variance() on columns of table "threads"
"""
input threads_variance_order_by {
  created_by: order_by
  id: order_by
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "users"
"""
type users {
  created_at: timestamptz!
  email: String!
  id: Int!
  image_url: String

  """
  An array relationship
  """
  messages(
    """
    distinct select on columns
    """
    distinct_on: [messages_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [messages_order_by!]

    """
    filter the rows returned
    """
    where: messages_bool_exp
  ): [messages!]!

  """
  An aggregate relationship
  """
  messages_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [messages_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [messages_order_by!]

    """
    filter the rows returned
    """
    where: messages_bool_exp
  ): messages_aggregate!
  name: String!

  """
  An array relationship
  """
  threads(
    """
    distinct select on columns
    """
    distinct_on: [threads_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [threads_order_by!]

    """
    filter the rows returned
    """
    where: threads_bool_exp
  ): [threads!]!

  """
  An aggregate relationship
  """
  threads_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [threads_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [threads_order_by!]

    """
    filter the rows returned
    """
    where: threads_bool_exp
  ): threads_aggregate!

  """
  An array relationship
  """
  threads_users(
    """
    distinct select on columns
    """
    distinct_on: [threads_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [threads_users_order_by!]

    """
    filter the rows returned
    """
    where: threads_users_bool_exp
  ): [threads_users!]!

  """
  An aggregate relationship
  """
  threads_users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [threads_users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [threads_users_order_by!]

    """
    filter the rows returned
    """
    where: threads_users_bool_exp
  ): threads_users_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""
aggregate avg on columns
"""
type users_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  id: Int_comparison_exp
  image_url: String_comparison_exp
  messages: messages_bool_exp
  name: String_comparison_exp
  threads: threads_bool_exp
  threads_users: threads_users_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint
  """
  users_email_key

  """
  unique or primary key constraint
  """
  users_pkey
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
  id: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  created_at: timestamptz
  email: String
  id: Int
  image_url: String
  messages: messages_arr_rel_insert_input
  name: String
  threads: threads_arr_rel_insert_input
  threads_users: threads_users_arr_rel_insert_input
  updated_at: timestamptz
}

"""
aggregate max on columns
"""
type users_max_fields {
  created_at: timestamptz
  email: String
  id: Int
  image_url: String
  name: String
  updated_at: timestamptz
}

"""
aggregate min on columns
"""
type users_min_fields {
  created_at: timestamptz
  email: String
  id: Int
  image_url: String
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """
  on conflict condition
  """
  on_conflict: users_on_conflict
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""
Ordering options when selecting data from "users".
"""
input users_order_by {
  created_at: order_by
  email: order_by
  id: order_by
  image_url: order_by
  messages_aggregate: messages_aggregate_order_by
  name: order_by
  threads_aggregate: threads_aggregate_order_by
  threads_users_aggregate: threads_users_aggregate_order_by
  updated_at: order_by
}

"""
primary key columns input for table: users
"""
input users_pk_columns_input {
  id: Int!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  email

  """
  column name
  """
  id

  """
  column name
  """
  image_url

  """
  column name
  """
  name

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  created_at: timestamptz
  email: String
  id: Int
  image_url: String
  name: String
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type users_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type users_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type users_stddev_samp_fields {
  id: Float
}

"""
aggregate sum on columns
"""
type users_sum_fields {
  id: Int
}

"""
update columns of table "users"
"""
enum users_update_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  email

  """
  column name
  """
  id

  """
  column name
  """
  image_url

  """
  column name
  """
  name

  """
  column name
  """
  updated_at
}

"""
aggregate var_pop on columns
"""
type users_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type users_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type users_variance_fields {
  id: Float
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
